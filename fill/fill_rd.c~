/***********************************************************************
*                 RCS INFO
*
*  @(#)  $RCSfile: fill_rd.c,v $
*  @(#)  $Revision: 1.4 $
*  @(#)  $Date: 1998/11/16 13:28:41 $
*  @(#)  $Author: taxiadm $
*  @(#)  $Source: /taxi-scan/taxi_proj/cvs/taxi-scan/src/fill/fill_rd.c,v $
*
*  Copyright (c) 1994 - MobileSoft Consulting, Inc. Woodinville WA
*
***********************************************************************/

static char rcsid[] = "$Id: fill_rd.c,v 1.4 1998/11/16 13:28:41 taxiadm Exp $";

#define KEY_SRC

#include <isam.h>
#include "Receipt_data_db.h"
#include "taxi_db.h"

#define OFFSET_VEH_NBR      8
#define OFFSET_TRANS_NBR    12

void
fill_receipt_key( char *from, char *buf )
{
  RECEIPT_DATA_REC  *rd = (RECEIPT_DATA_REC *)from;
  register int offset = 0;

  stlong(rd->serial_nbr, &buf[0]);
  
  stlong(rd->veh_nbr, &buf[OFFSET_VEH_NBR]);

  stlong(rd->itm_trans_nbr, &buf[OFFSET_TRANS_NBR]);
  
}

void
fill_receipt( req_buf, buf, action )
     char *req_buf;
     char *buf;
     int action;
{
  long serial_nbr = 0;
  register int  offset = 0;
  
  RECEIPT_DATA_REC *rd = (RECEIPT_DATA_REC *)req_buf;
  
  if ( action == ADD_REC )
    {
      isuniqueid(Db_files[RECEIPT_DATA_FILE_ID].fd, &serial_nbr);
      rd->serial_nbr = serial_nbr;
    }
  
  stlong(rd->serial_nbr, &buf[offset]);
  offset += LONGSIZE;
  
  stlong(rd->trans_dt_tm, &buf[offset]);
  offset += LONGSIZE;
  
  stlong(rd->veh_nbr, &buf[offset]);
  offset += LONGSIZE;
  
  stlong(rd->itm_trans_nbr, &buf[offset]);
  offset += LONGSIZE; 

  stchar(rd->date, &buf[offset],sizeof(rd->date)-1);
  offset += sizeof(rd->date)-1;

  stchar(rd->time, &buf[offset],sizeof(rd->time)-1);
  offset += sizeof(rd->time)-1;

  stlong(rd->amount, &buf[offset]);
  offset += LONGSIZE;

  stlong(rd->extras, &buf[offset]);
  offset += LONGSIZE;

  stlong(rd->distance, &buf[offset]);
  offset += LONGSIZE;
  
  stchar(rd->start_time, &buf[offset],sizeof(rd->start_time)-1);
  offset += sizeof(rd->start_time)-1;

  stchar(rd->stop_time, &buf[offset],sizeof(rd->stop_time)-1);
  offset += sizeof(rd->stop_time)-1;

  stchar(rd->trip_type, &buf[offset],sizeof(rd->trip_type)-1);
  offset += sizeof(rd->trip_type)-1;

  stchar(rd->driver_nbr, &buf[offset],sizeof(rd->driver_nbr)-1);
  offset += sizeof(rd->driver_nbr)-1;

  stchar(rd->car_nbr, &buf[offset],sizeof(rd->car_nbr)-1);
  offset += sizeof(rd->car_nbr)-1;

  stchar(rd->biz_nbr, &buf[offset],sizeof(rd->biz_nbr)-1);
  offset += sizeof(rd->biz_nbr)-1;

  stchar(rd->credit_card, &buf[offset],sizeof(rd->credit_card)-1);
  offset += sizeof(rd->credit_card)-1;

  stchar(rd->itm_text, &buf[offset],sizeof(rd->itm_text)-1);
  offset += sizeof(rd->itm_text)-1;
  
  stlong(rd->call_nbr, &buf[offset]);
  offset += LONGSIZE;
  
  stchar(&rd->processed, &buf[offset], sizeof(rd->processed));
  offset += sizeof(rd->processed);

  stchar(&rd->payment_type, &buf[offset], sizeof(rd->payment_type));
  offset += sizeof(rd->payment_type);

}

void
unfill_receipt( req_buf, buf )
     char *req_buf;
     char *buf;
{
  RECEIPT_DATA_REC   *rd;
  register int offset = 0;

  rd = ( RECEIPT_DATA_REC * ) req_buf;
  
  rd->serial_nbr = ldlong(&buf[offset]);
  offset += LONGSIZE;

  rd->trans_dt_tm = ldlong(&buf[offset]);
  offset += LONGSIZE;

  rd->veh_nbr = ldlong(&buf[offset]);
  offset += LONGSIZE;

  rd->itm_trans_nbr = ldlong(&buf[offset]);
  offset += LONGSIZE;

  ldchar(&buf[offset],sizeof(rd->date)-1,rd->date);
  offset += sizeof(rd->date)-1;

  ldchar(&buf[offset],sizeof(rd->time)-1,rd->time);
  offset += sizeof(rd->time)-1;

  rd->amount = ldlong(&buf[offset]);
  offset += LONGSIZE;

  rd->extras = ldlong(&buf[offset]);
  offset += LONGSIZE;

  rd->distance = ldlong(&buf[offset]);
  offset += LONGSIZE;

  ldchar(&buf[offset],sizeof(rd->start_time)-1,rd->start_time);
  offset += sizeof(rd->start_time)-1;

  ldchar(&buf[offset],sizeof(rd->stop_time)-1,rd->stop_time);
  offset += sizeof(rd->stop_time)-1;

  ldchar(&buf[offset],sizeof(rd->trip_type)-1,rd->trip_type);
  offset += sizeof(rd->trip_type)-1;

  ldchar(&buf[offset],sizeof(rd->driver_nbr)-1,rd->driver_nbr);
  offset += sizeof(rd->driver_nbr)-1;

  ldchar(&buf[offset],sizeof(rd->car_nbr)-1,rd->car_nbr);
  offset += sizeof(rd->car_nbr)-1;

  ldchar(&buf[offset],sizeof(rd->biz_nbr)-1,rd->biz_nbr);
  offset += sizeof(rd->biz_nbr)-1;

  ldchar(&buf[offset],sizeof(rd->credit_card)-1,rd->credit_card);
  offset += sizeof(rd->credit_card)-1;
  
  ldchar(&buf[offset],sizeof(rd->itm_text)-1,rd->itm_text);
  offset += sizeof(rd->itm_text)-1;

  rd->call_nbr = ldlong(&buf[offset]);
  offset += LONGSIZE;

  rd->processed = buf[offset];
  offset += sizeof( rd->processed );

  rd->payment_type = buf[offset];
  offset += sizeof( rd->payment_type );
}
