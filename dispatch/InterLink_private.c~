/***********************************************************************
*                 RCS INFO
*
*  @(#)  $RCSfile: InterLink_private.c,v $
*  @(#)  $Revision: 1.4 $
*  @(#)  $Date: 2004/02/02 18:39:38 $
*  @(#)  $Author: jwelch $
*  @(#)  $Source: /taxi-scan/taxi_proj/cvs/taxi-scan/src/dispatch/InterLink_private.c,v $
*
*  Copyright (c) 2000 - MobileSoft Consulting, Inc. Dublin OH
*
***********************************************************************/

static char rcsid[] = "$Id: InterLink_private.c,v 1.4 2004/02/02 18:39:38 jwelch Exp $";

#include <stdio.h>
#include <sys/types.h>
#include "taxipak.h"
#include "dispatch.h"
#include "mads_types.h"
#include "mad_error.h"
#include "ui_ipc.h"
#include "mad_ipc.h"
#include "path.h"
#include "taxi_db.h"
#include "language.h"
#include "Object.h"
#include "List_public.h"
#include "msg_defs.h"
#include "Call_private.h"
#include "Call_public.h"
#include "Call_db.h"
#include "Call_hist_db.h"
#include "Ilink_private.h"
#include "Interlink_db.h"
#include "Exception_private.h"
#include "writer.h"
#include "Timer_public.h"
#include "timers.h"
#include "Vehicle_public.h"
#include "Vehicle_private.h"
extern int ilink_pipe_fd;
extern time_t mads_time;



InterLink_accept_notify( call_hndl )
  CALL_HNDL call_hndl;
{
  ILINK_RQST ilink;

  sprintf( ilink.ilink_type, "%03d", ILINK_DISP_ACCEPT );
  sprintf( ilink.call_nbr, "%010d", (int)Call_get_value( call_hndl, CALL_NBR ) );

  if ( write( ilink_pipe_fd, &ilink, sizeof(ILINK_RQST) ) == -1 )
    {
      ERROR(' ',"","Error writing to ILINK pipe");
    }
}

InterLink_cancel_notify( call_hndl )
  CALL_HNDL call_hndl;
{
  ILINK_RQST ilink;


  sprintf( ilink.ilink_type, "%03d", ILINK_DISP_CANCEL );
  sprintf( ilink.call_nbr, "%010d", (int)Call_get_value( call_hndl, CALL_NBR ) );

  if ( write( ilink_pipe_fd, &ilink, sizeof(ILINK_RQST) ) == -1 )
    {
      ERROR(' ',"","Error writing to ILINK pipe");
    }
}

InterLink_transfer_notify( call_hndl )
  CALL_HNDL call_hndl;
{
  ILINK_DB_REC ilink;
  CALL_REC           *cl_ptr;     
  int rs = 0;
  
  bzero( &ilink, sizeof(ILINK_DB_REC) );
  
  if ( Call_rec_alloc((CALL_REC_HNDL *) & cl_ptr ) != SUCCESS )
    {
      ERROR(' ', "", "Call_rec_alloc failure InterLink_transfer_notify");
    }
  else
    {
      cl_ptr->nbr = (int)Call_get_value( call_hndl, CALL_NBR );
      if ( Call_rec_read((CALL_REC_HNDL) cl_ptr, DB_EQUAL | DB_LOCK, CALL_KEY1 ) != SUCCESS )
	{
	  ERROR(' ', "", "Call_rec_read failure InterLink_transfer_notify");
	  Call_release_locks();
	  Call_rec_free((CALL_REC_HNDL *) & cl_ptr );
	  return;
	}
      else
	{
	  if (strcmp(cl_ptr->status, UNASSGND))
	    {
	      sprintf( trace_str, "error in state on attempt to transfer ILINK %d", cl_ptr->nbr );
	      ERROR(' ', "", trace_str);
              Call_release_locks();
	      Call_rec_free((CALL_REC_HNDL *) & cl_ptr );	      
	      return;
	    }
	}
    }
  
  Call_release_locks();
  Call_rec_free((CALL_REC_HNDL *) & cl_ptr );

  ilink.tpak_nbr = (int)Call_get_value( call_hndl, CALL_NBR );
  strcpy(ilink.status, UNASSGND);
  strcpy(ilink.origin, "TPAK");
  strcpy(ilink.t800_nbr, "888");

  if ( ( rs = db_open( ILINK_FILE_ID, DB_READ_WRITE | DB_MANUAL_LOCK ) ) == SUCCESS )
    {
      if ( ( rs = db_write(ILINK_FILE_ID, &ilink ) ) != SUCCESS )
	{
	      sprintf( trace_str, "error in state on attempt to transfer ILINK %d", (int)Call_get_value( call_hndl, CALL_NBR ) );
	      ERROR(' ', "", trace_str);	  
	}
    }
  else
    {
	      sprintf( trace_str, "error in state on attempt to transfer ILINK %d", (int)Call_get_value( call_hndl, CALL_NBR ) );
	      ERROR(' ', "", trace_str);      
    }

  db_close(ILINK_FILE_ID);
  

}

InterLink_transfer_reject( pIlink_rqst )
  ILINK_RQST *pIlink_rqst;
{
  struct cisam_cl db_call;
  struct call_ipc_rec cipc;
  int i;
  
  bzero( &db_call, sizeof( struct cisam_cl ) );
  bzero( &cipc, sizeof( struct call_ipc_rec ) );

  db_call.nbr = atoi( pIlink_rqst->call_nbr );
  if ( db_read_key( CALL_FILE_ID, &db_call, &cl_key1, DB_EQUAL ) != SUCCESS )
    {
      sprintf(error_str, "Ilink_reject - error reading DB (%s)", pIlink_rqst->call_nbr);
      ERROR( ' ', " ", error_str );
      return( FAIL );
    }
  cipc.u_prcs_id = 0;
  cipc.msg_nbr = 0;
  cipc.FTJ_nbr = db_call.ext_nbr;
  cipc.offer_type = db_call.offer_type;
  cipc.detail_type = db_call.detail_type;
  cipc.call_msg_nbr = db_call.call_msg_nbr;
  cipc.c_isam_nbr = isrecnum;
  cipc.call_nbr = db_call.nbr;
  cipc.grouped_with = db_call.grouped_with;
  cipc.fleet = db_call.fleet;
  TC_get_call_type( &db_call, &cipc );
  cipc.call_type.time = 0;
  cipc.pickup_zone = db_call.pckup_zone;
  cipc.dest_zone = db_call.dest_zone;
  cipc.personal_veh = db_call.personal_veh;
  cipc.personal_rqst = db_call.personal_rqst;
  if ( db_call.veh_attr_flag == YES )
    {
      for ( i = 0; i < ATTR_MAX; i++ )
	{
	  if ( db_call.veh_attr[i] == YES )
	    TC_set_bit( i, 1, &cipc.veh_attr );
	}
    }
  if ( db_call.drv_attr_flag == YES )
    {
      for ( i = 0; i < ATTR_MAX; i++ )
	{
	  if ( db_call.drv_attr[i] == YES )
	    TC_set_bit( i, 1, &cipc.drv_attr );
	}
    }
  cipc.priority = db_call.priority;
  cipc.due_time = db_call.due_date_time;

  /* temporarily use old_due_time_field to store activation time of TC */
  cipc.old_due_time = mads_time;
  cipc.gps_lat = db_call.gps_lat;
  cipc.gps_long = db_call.gps_long;
  cipc.call_type.ilink_reject = 1;
  Call_initialize( &cipc, TRUE );
  
}

InterLink_complete_notify( call_hndl )
  CALL_HNDL call_hndl;
{
  ILINK_RQST ilink;

  ilink.u_prcs_id = 0;
  sprintf( ilink.ilink_type, "%03d", ILINK_DISP_COMPLETE );
  sprintf( ilink.call_nbr, "%010d", (int)Call_get_value( call_hndl, CALL_NBR ) );

  if ( write( ilink_pipe_fd, &ilink, sizeof(ILINK_RQST) ) == -1 )
    {
      ERROR(' ',"","Error writing to ILINK pipe");
    }
}

InterLink_timeout_notify( call_hndl )
  CALL_HNDL call_hndl;
{
  ILINK_RQST ilink;

  ilink.u_prcs_id = 0;
  sprintf( ilink.ilink_type, "%03d", ILINK_DISP_TIMEOUT );
  sprintf( ilink.call_nbr, "%010d", (int)Call_get_value( call_hndl, CALL_NBR ) );

  if ( write( ilink_pipe_fd, &ilink, sizeof(ILINK_RQST) ) == -1 )
    {
      ERROR(' ',"","Error writing to ILINK pipe");
    }
}

RET_STATUS
Interlink_transfer_verify( CALL_HNDL call_hndl )
{
  ILINK_DB_REC  ilink_rec;
  int           rs;
  CALL_HIST_REC callh_rec;

#ifdef VPU
  VEH_HNDL veh_hndl;
  struct veh_driv *veh_ptr;
  struct calls *call_ptr;
   time_t gps_time;  

  call_ptr = (struct calls *)call_hndl;
  if (call_ptr->veh_ptr)
    veh_ptr = call_ptr->veh_ptr;
  else
    {
      Veh_get_hndl(BY_NBR, 9998, 0, &veh_hndl);
      veh_ptr = (struct veh_drive *)veh_hndl;
    }
  // has trip started yet?
  if (Veh_get_state((VEH_HNDL)veh_ptr, VEH_ACCEPT_STATE) == FALSE)
    {
       if (Call_set_state(call_hndl, CALL_OFFERED_STATE, (HNDL)veh_hndl) == SUCCESS)
	 {
	   Veh_set_state(veh_hndl, VEH_CALL_OFFER_STATE, (HNDL)call_hndl);
	   Veh_set_value(veh_hndl, VEH_CALL_OFFER_LEVEL, (HNDL) 1);
	   Veh_set_state(veh_hndl, VEH_ACCEPT_STATE, call_hndl);
	   (void) Timer_create( TIMER_TYPE, T_ILINK_TRANSFER_VERIFY,
				TIMER_EXPIRE_TIME, 30,
				TIMER_DATA, call_hndl,
				TIMER_NOTIFY_FUNC, Interlink_transfer_verify,
				ATTRIBUTE_END );
	   veh_ptr->gps_lat = 6677464.0;
	   veh_ptr->gps_long = 382043.0;
	   gps_time = (time_t)time(0);
	   Veh_set_value((VEH_HNDL)veh_ptr, VEH_GPS_TIME, (HNDL)gps_time);
	   return;
	 }
    }
  else if (Veh_get_state((VEH_HNDL)veh_ptr, VEH_METER_ON_STATE) == FALSE)
    {
      Veh_set_state((VEH_HNDL)veh_ptr, VEH_METER_ON_STATE, HNDL_NULL);
      Veh_set_state((VEH_HNDL) veh_ptr, VEH_PICKUP_STATE, HNDL_NULL);      
      // automaticaly finish the trip in 30 seconds
      (void) Timer_create( TIMER_TYPE, T_ILINK_TRANSFER_VERIFY,
			   TIMER_EXPIRE_TIME, 60,
			   TIMER_DATA, call_hndl,
			   TIMER_NOTIFY_FUNC, Interlink_transfer_verify,
			   ATTRIBUTE_END );
      return;
    }
  else // close trip
    {
      Veh_process_key((VEH_HNDL)veh_ptr, VEH_METER_OFF_KEY, HNDL_NULL, HNDL_NULL);
      return;      
    }

#endif
  if ( (short)Call_get_value( call_hndl, CALL_TYPE_ILINK ) == FALSE )
    return(FAIL); // trip is not an Interlink trip

  // Check Ilink table for entry
  if ( ( rs = db_open( ILINK_FILE_ID, DB_READ_WRITE | DB_MANUAL_LOCK ) ) == SUCCESS )
    {
      ilink_rec.tpak_nbr = (int)Call_get_value( call_hndl, CALL_NBR );
      if ( ( rs = db_read_key( ILINK_FILE_ID, &ilink_rec, &ilink_key1, DB_EQUAL ) ) == SUCCESS )
	{
	  if ( !strncmp(ilink_rec.t800_nbr, "888", 3) )
	    {
	      //Notify LTX that trip is cancelled in case they have processed the trip
	      
	      //activate within TaxiPak
	      Call_set_value( call_hndl, CALL_TYPE_ILINK, (HNDL)FALSE );
	      Call_set_value( call_hndl, CALL_TYPE_ILINK_REJECT, (HNDL)TRUE );
	      Call_reset_state( call_hndl, CALL_TIMEOUT_STATE, (HNDL)R_APPROVE );
	      writer_unassgn( (int)Call_get_value( call_hndl, CALL_NBR ) );
	      // Add FAILED history event
	      bzero(&callh_rec, sizeof(CALL_HIST_REC));
	      callh_rec.call_nbr = (int)Call_get_value( call_hndl, CALL_NBR );
	      callh_rec.exception_nbr = 0;
	      callh_rec.event_type = REGULAR_EVENT;
	      callh_rec.veh_nbr = 0;
	      callh_rec.drv_id = 0;
	      callh_rec.user_id = 0;
	      strcpy( callh_rec.event_desc, "FAILED" );  
	      writer_add_hist( &callh_rec );
	    }
	  else if ( ( strstr(ilink_rec.t800_nbr, "-") != NULL ) && ( !(strncmp(ilink_rec.status, "REJECTED", 8)) ) ) // LTX can't handle order
	    {
	      //activate within TaxiPak
	      Call_set_value( call_hndl, CALL_TYPE_ILINK, (HNDL)FALSE );
	      Call_set_value( call_hndl, CALL_TYPE_ILINK_REJECT, (HNDL)TRUE );
	      Call_reset_state( call_hndl, CALL_TIMEOUT_STATE, (HNDL)R_APPROVE );
	      writer_unassgn( (int)Call_get_value( call_hndl, CALL_NBR ) );
	      // Add FAILED history event
	      bzero(&callh_rec, sizeof(CALL_HIST_REC));
	      callh_rec.call_nbr = (int)Call_get_value( call_hndl, CALL_NBR );
	      callh_rec.exception_nbr = 0;
	      callh_rec.event_type = REGULAR_EVENT;
	      callh_rec.veh_nbr = 0;
	      callh_rec.drv_id = 0;
	      callh_rec.user_id = 0;
	      strcpy( callh_rec.event_desc, "LTXREJ" );  
	      writer_add_hist( &callh_rec );
	    }
	  else if ( ( strstr(ilink_rec.t800_nbr, "-") != NULL ) && ( !(strncmp(ilink_rec.status, "AVOIN", 5)) ) ) // Still waiting for LTX
	    {
	      if ( time(0) - (int)Call_get_value( call_hndl, CALL_TIME_ENTERED ) > 90 )
		{
		  // No confirmation of XFER from LTX. Reactivate in TaxiPak
		  //activate within TaxiPak
#ifdef FOO		  
		  Call_set_value( call_hndl, CALL_TYPE_ILINK, (HNDL)FALSE );
		  Call_set_value( call_hndl, CALL_TYPE_ILINK_REJECT, (HNDL)TRUE );
		  Call_reset_state( call_hndl, CALL_TIMEOUT_STATE, (HNDL)R_APPROVE );
		  writer_unassgn( (int)Call_get_value( call_hndl, CALL_NBR ) );
#endif		  
		  // Add TMOUT history event
		  bzero(&callh_rec, sizeof(CALL_HIST_REC));
		  callh_rec.call_nbr = (int)Call_get_value( call_hndl, CALL_NBR );
		  callh_rec.exception_nbr = 0;
		  callh_rec.event_type = REGULAR_EVENT;
		  callh_rec.veh_nbr = 0;
		  callh_rec.drv_id = 0;
		  callh_rec.user_id = 0;
		  strcpy( callh_rec.event_desc, "TMOU1" );  
		  writer_add_hist( &callh_rec );
		}
	      else
		{
	      
	      	      (void) Timer_create(
	      				  TIMER_TYPE, T_ILINK_TRANSFER_VERIFY,
	      				  TIMER_EXPIRE_TIME, 30,
	      				  TIMER_DATA, call_hndl,
	      				  TIMER_NOTIFY_FUNC, Interlink_transfer_verify,
	      				  ATTRIBUTE_END );
		}
	    }
	  else if ( ( strstr(ilink_rec.t800_nbr, "-") != NULL ) && ( !(strncmp(ilink_rec.status, "XFER-CONFIRM", 12)) ) ) // Waiting for vehicle assign
	    {
	      if ( time(0) - (int)Call_get_value( call_hndl, CALL_TIME_ENTERED ) > 180 ) // Give LTX 3 minutes to deliver a vehicle number
		{
		  // No confirmation of XFER from LTX. Reactivate in TaxiPak
		  //activate within TaxiPak
		  //081111 - jwelch - caused issues with call reactivation. commenting out.
#ifdef FOO
		  Call_set_value( call_hndl, CALL_TYPE_ILINK, (HNDL)FALSE );
		  Call_set_value( call_hndl, CALL_TYPE_ILINK_REJECT, (HNDL)TRUE );
		  Call_reset_state( call_hndl, CALL_TIMEOUT_STATE, (HNDL)R_APPROVE );
		  writer_unassgn( (int)Call_get_value( call_hndl, CALL_NBR ) );
#endif		  
		  // Add TMOUT history event
		  bzero(&callh_rec, sizeof(CALL_HIST_REC));
		  callh_rec.call_nbr = (int)Call_get_value( call_hndl, CALL_NBR );
		  callh_rec.exception_nbr = 0;
		  callh_rec.event_type = REGULAR_EVENT;
		  callh_rec.veh_nbr = 0;
		  callh_rec.drv_id = 0;
		  callh_rec.user_id = 0;
		  strcpy( callh_rec.event_desc, "TMOU2" );  
		  writer_add_hist( &callh_rec );

		}
	      else
		{
		  // Set a timer to check for vehicle assignment again in 30 seconds
		  (void) Timer_create(	  TIMER_TYPE, T_ILINK_TRANSFER_VERIFY,
	      				  TIMER_EXPIRE_TIME, 30,
	      				  TIMER_DATA, call_hndl,
	      				  TIMER_NOTIFY_FUNC, Interlink_transfer_verify,
	      				  ATTRIBUTE_END );
		}
	    }
	  // once the ilink record status goes to 'ASSIGNED', there won't be any additional timers activated
	}
      else
	Call_deactivate( call_hndl );
    }
  
  db_close( ILINK_FILE_ID );
}
  
  

