static char sz__FILE__[]="@(#)ui_altrn.c	10.1.2.1(ver) Date Release 12/2/94" ;
 /****************************************************************************
 *                                                                           *
 *                           S C C S   I N F O                               *
 *                                                                           *
 * @(#)  ui_altrn.c; Rel: 10.1.2.1; Get date: 4/19/95 at 08:49:58
 * @(#)  Last delta: 12/2/94 at 18:28:57
 * @(#)  SCCS File: /taxi/sccs/s.ui_altrn.c
 *                                                                           *
 *****************************************************************************/

/* Make sure location constants are defined. Create a compile error if they
   are not defined or both are defined. */
#ifdef SCANDINAVIA
#ifdef NAMERICA
ERROR: "Both compile time constants SCANDINAVIA and NAMERICA are defined."
#endif
#else
#ifdef NAMERICA
#else
ERROR: "Compile time constant SCANDINAVIA or NAMERICA undefined."
#endif
#endif

#include <stdio.h>
#include <cursesX.h>
#include <sys/types.h>

#include "mads_types.h"
#include "mads_isam.h"
#include "call_entry.h"
#include "df_maint.h"
#include "func_keys.h"
#include "screens.h"
#include "ui_def.h"
#include "ui_error.h"
#include "user.h"
#include "zgeo.h"
#include "language.h"
#include "ui_strdefs.h"
#include "enhance.h"
#include "switch_ext.h"


extern struct scr_flds basic_scr_flds[];				/* basic call entry screen */
extern struct scr_flds extended_scr_fld[];				/* extended call entry screen */
extern struct cisam_cl call_struct;					/* structure containing call entry info */
extern struct keydesc zn_key1;
extern char req_buf[];
extern int scr_name;							/* current screen name */
extern short clear_err_flag;						/* error flag */
extern WINDOW *srch_win;						/* search window for displaying alternates */
extern WINDOW *alt_win;
extern short call_zoned;						/* flag to show call was zoned */
extern int zip1,zip2;
extern long glEnhSwitch; 

struct scr_flds alt_flds[] = {						/* piu fields, 1 for choice selection */
	{0,0,1,1},
	{A_SLCT_ROW, A_SLCT_COL, A_SLCT_SIZ, A_SLCT}
};

/***********************************************************************************************************************************
altrn_adr -
This routine is responsible for performing the alternate choice function when the appropriate function key is pressed.  The
current screen is checked to determine if one of the call entry screens is currently displayed.  Then the call structure is
scanned to determine whether this alternate choice is for the pickup or destination address.  If the pickup address is already
zoned and there is a destination address, then it is assumed that the choice is for the destination address.
***********************************************************************************************************************************/
altrn_adr(piu_ptr)
	int *piu_ptr;							/* pointer to current field */
{
    int i,x,y;								/* temporary variables */
    int file_flag = -1;							/* file flag for alternate choice */
    int key_flag = -1;							/* key flag for alternate choice */
    int count = 0;							/* count of alternates found */
    int pck_dst;							/* pickup or destination flag */
    int rkey = 0;							/* key for read_field */
    int select = 0;							/* select flag set if choice found */
    short srch_select = 0;						/* truly indicates if a choice was made */
    char alt_buf[READ_BUF_SIZE];					/* input buffer for read_field */
    struct alt_choice altr_ch[MAXALT];					/* alternate choice array */
    int should_clear = 0;
    WINDOW *wAlt;

    memset(altr_ch,0,(sizeof(struct alt_choice) * MAXALT));		/* clear out alternate choice array */
    if ( glEnhSwitch & ENH0008 )
      wAlt = alt_win;
    else
      wAlt = srch_win;
    
    if (scr_name == BASIC_CALL_SCR || scr_name == SUBS_BASIC_SCR || scr_name == EXTENDED_CALL_SCR || 
	scr_name == SUBS_EXTENDED_SCR || (scr_name == ALL_CALLS_SCR && piu_ptr == NULL) ||
	(scr_name == INDIVIDUAL_CALLS_SCR && piu_ptr == NULL) || (scr_name == SUBS_FUTURE_CLS_SCR && piu_ptr == NULL)){
	pck_dst = PICKUP_ADDR;					/* default to pickup address */
	if ((scr_name == BASIC_CALL_SCR || scr_name == SUBS_BASIC_SCR) && (*piu_ptr > B_COMMENT && *piu_ptr <= B_DEST_ZONE))
	    pck_dst = DEST_ADDR;					/* getting alternates for destination address */
	if ((scr_name == EXTENDED_CALL_SCR || scr_name == SUBS_EXTENDED_SCR) && (*piu_ptr > E_CAR_NO && *piu_ptr <= E_DEST_ZONE))
	    pck_dst = DEST_ADDR;					/* getting alternates for destination address */

	zone_alt(&file_flag,&key_flag,&call_struct,&count,FORWRD,altr_ch,pck_dst);	/* get alternates */
	if (count == 0) {						/* did we find any? */
	    prt_error(UI_NO_RECORD,catgets(UI_m_catd, UI_1, UI_ALTRN_1, "<for alternates>"));			/* no, print error */
	    select = 1;							/* no need to continue */
	}
	else {								/* yes, found altenates */
	    alt_win_disp();						/* display alternate window */
	    prt_entry_areas(wAlt,alt_flds,A_MAX);			/* print underscores in user filled fields */
	    alt_ch_disp(count,file_flag,altr_ch);			/* display the possible choices */
	    wrefresh(wAlt);

	}

	while (select == 0) {						/* repeat until address is selected */
	    i = read_field(wAlt,alt_flds,A_SLCT,alt_buf,&rkey,&should_clear);	/* read user input */
	    if ((clear_err_flag) && (i != -1)) {			/* was there an error displayed and seen? */
		clear_error();						/* yes, clear it */
		refresh();
	    }
	    switch (i) {							/* perform based on user input */
		case 0:
		case '\n':							/* something was entered */
			rev_to_norm(wAlt,alt_flds,A_SLCT);			/* set field to normal attribute again */
			if ((x = atoi(alt_buf)) < 1) {				/* just a carriage return ? */
				select = 1;
				break;
			}
			if (((x = atoi(alt_buf)) < 1) || (x > count)) {		/* get value, is it in range? */
			    prt_error(UI_NO_RECORD,catgets(UI_m_catd, UI_1, UI_ALTRN_2, "Alternate address record not found"));		/* no */
			}
			else {							/* yes, it is in range */
				if (pck_dst == PICKUP_ADDR){
			    		if((y = choose_alt(&file_flag,&key_flag,&call_struct,altr_ch,(x-1),pck_dst,&zip1)) >= 0)  
				    		call_struct.pckup_zone = y;			/* store in pickup zone */
				}
				else{
			    		if((y = choose_alt(&file_flag,&key_flag,&call_struct,altr_ch,(x-1),pck_dst,&zip2)) >= 0)  
				    		call_struct.dest_zone = y;			/* store in destination zone */
				}
			    redisp_scr(pck_dst,file_flag,piu_ptr);		/* redraw data on call entry screen */
			    werase( wAlt );
			    wrefresh( wAlt );
			    touchwin(stdscr);
			    refresh();
			    select = 1;						/* selecton was made */
			    srch_select = 1;					/* selecton was made */
			    if (pck_dst == PICKUP_ADDR)
			      get_est_wait_time(1);
			}
			break;

		case PREV_PG_KEY:						/* go for previous page of alternates */
			zone_alt(&file_flag,&key_flag,&call_struct,&count,BCKWRD,altr_ch,pck_dst);		/* get them */
			alt_ch_disp(count,file_flag,altr_ch);			/* display the alternate choices */
			break;

		case NEXT_PG_KEY:						/* go for next page of alternates */
			zone_alt(&file_flag,&key_flag,&call_struct,&count,FORWRD,altr_ch,pck_dst);		/* get them */
			alt_ch_disp(count,file_flag,altr_ch);			/* display the alternate choices */
			break;

		case CANCEL_KEY:
		case ALTERNATE_KEY:						/* get out of alternate choice function */
			select = 1;						/* pretend one was selected */
			break;

		case COMMAND_KEY:	
			werase(wAlt);							/* erase the search window */
			wrefresh(wAlt);							/* refresh it */
			touchwin(stdscr);							/* refresh the standard screen */
			refresh();
			command_line();
			select = 1;
			break;

		case PRINT_SCR_KEY:	/* print the screen image with window overlay */
			print_scr(wAlt);
			break;
		case HELP_KEY:
			help(ALTERNATE_WIN_SCR, A_SLCT);
			/* redraw the srch_win */
			touchwin(wAlt);
			wrefresh(wAlt);
			break;
		default:
			break;
	    }
	}
	werase(wAlt);							/* erase the search window */
	wrefresh(wAlt);							/* refresh it */
	touchwin(stdscr);							/* refresh the standard screen */
	refresh();
    }
    else
	    prt_error(UI_NOT_ALLOWED,catgets(UI_m_catd, UI_1, UI_ALTRN_3, "<alternate addr key from this screen>"));	/* no, print error */

    if (scr_name == ALL_CALLS_SCR || scr_name == INDIVIDUAL_CALLS_SCR || scr_name == SUBS_FUTURE_CLS_SCR)
	return(srch_select);
    else
    	return(0);
}


/***********************************************************************************************************************************
alt_win_disp -
This function displays the text for alternate choice window.  This is the prompt and the item numbers.
***********************************************************************************************************************************/
alt_win_disp()
{
    if ( glEnhSwitch & ENH0008 )
      {
	werase(alt_win);
	tpak_box(alt_win, 0, 0 );
	wattrset(alt_win, A_REVERSE);
	mvwaddstr(alt_win,1,ALT_TEXT_COL1,"<1>");
	mvwaddstr(alt_win,2,ALT_TEXT_COL1,"<2>");
	mvwaddstr(alt_win,3,ALT_TEXT_COL1,"<3>");
	mvwaddstr(alt_win,4,ALT_TEXT_COL1,"<4>");
	mvwaddstr(alt_win,5,ALT_TEXT_COL1,"<5>");
	mvwaddstr(alt_win,6,ALT_TEXT_COL1,"<6>");
	mvwaddstr(alt_win,7,ALT_TEXT_COL1,"<7>");
	mvwaddstr(alt_win,8,ALT_TEXT_COL1,"<8>");
	wattrset(alt_win, 0);
      }
    else
      {
	werase(srch_win);
	tpak_box(srch_win, 0, 0 );
	wattrset(srch_win, A_REVERSE);
	mvwaddstr(srch_win,1,ALT_TEXT_COL1,"<1>");
	mvwaddstr(srch_win,1,ALT_TEXT_COL2,"<5>");
	mvwaddstr(srch_win,2,ALT_TEXT_COL1,"<2>");
	mvwaddstr(srch_win,2,ALT_TEXT_COL2,"<6>");
	mvwaddstr(srch_win,3,ALT_TEXT_COL1,"<3>");
	mvwaddstr(srch_win,3,ALT_TEXT_COL2,"<7>");
	mvwaddstr(srch_win,4,ALT_TEXT_COL1,"<4>");
	mvwaddstr(srch_win,4,ALT_TEXT_COL2,"<8>");
	wattrset(srch_win, 0);
      }
  }


/***********************************************************************************************************************************
alt_ch_disp -
This function displays the actual alternate choices.  Based on the number of alternates given by the count parameter, the options
are printed in the window from the alternate choice array.
***********************************************************************************************************************************/
alt_ch_disp(count,file_flag,altr_ch)
int count;									/* count of alternates in array */
int file_flag;									/* file that choices are for */
struct alt_choice altr_ch[];							/* array containing the alternate choice info */
{
    int i;									/* temporary variable */
    int row,col;								/* row and column to print data */
    char av_buf[132];								/* temporary buffer for formatting text */

    if (count == 0) {								/* is there at least on alternate choice */
	prt_error(UI_NO_RECORD,catgets(UI_m_catd, UI_1, UI_ALTRN_1, "<for alternates>"));				/* no, print error */
	return;
    }

    for(i=0; i<MAXALT; i++) {							/* print out all choices */
	row = i;								/* get row */
	col = ALT_DATA_COL1;
	if ( !( glEnhSwitch & ENH0008 ) )
	  {
	    if(row > 3){
	      row = row - 4;							/* second set of columns */
	      col = ALT_DATA_COL2;
	    }
	  }
	if (count > i) {							/* is this a valid choice? */
	    switch (file_flag) {						/* format of choice depends on file */
		case STRNAME_FILE_ID:
				sprintf(av_buf,"%-20s  %3s",altr_ch[i].str_name,altr_ch[i].str_type);
				break;

		case ADDRESS_FILE_ID:
#ifdef NAMERICA
				sprintf(av_buf,"%6d - %6d  %2s %-20s %3s %2s   %3s  %20s",altr_ch[i].low, altr_ch[i].high,
							altr_ch[i].str_pre,altr_ch[i].str_name,altr_ch[i].str_type,
							altr_ch[i].str_post,altr_ch[i].str_city, altr_ch[i].district);
#else
				if ( glEnhSwitch & ENH0008 )
				  sprintf(av_buf,"%20s %6d - %6d    %3s %20s",
					  altr_ch[i].str_name, altr_ch[i].low, altr_ch[i].high,
					  altr_ch[i].str_city, altr_ch[i].district);
				else
				  sprintf(av_buf,"%20s %6d - %6d    %3s %-20s",
					  altr_ch[i].str_name, altr_ch[i].low, altr_ch[i].high,
					  altr_ch[i].str_city, altr_ch[i].district);
#endif
				break;

		case PLACENM_FILE_ID:
#ifdef NAMERICA
				sprintf(av_buf,"%-20s %6d %-2s %-20s %-3s %-2s %-3s",altr_ch[i].plc_name,altr_ch[i].low,
							altr_ch[i].str_pre,altr_ch[i].str_name,
							altr_ch[i].str_type,altr_ch[i].str_post,altr_ch[i].str_city);
#else
				/* Only print street # (altr_ch[i].low) if there is a street name */
				if (altr_ch[i].str_name[0])
				  sprintf(av_buf,"%-20s  %20s %-6d %-3s",altr_ch[i].plc_name,
					  altr_ch[i].str_name, altr_ch[i].low, altr_ch[i].str_city);
				else
				  sprintf(av_buf,"%-20s  %20s        %-3s",altr_ch[i].plc_name,
					  altr_ch[i].str_name, altr_ch[i].str_city);
#endif				
				break;

		case INT_FILE_ID:
				sprintf(av_buf,"%2s %-20s %3s %2s / %2s %-20s %3s %2s  %3s",altr_ch[i].str_pre,
							altr_ch[i].str_name,altr_ch[i].str_type,altr_ch[i].str_post,
							altr_ch[i].int_pre,altr_ch[i].int_name,altr_ch[i].int_type,
							altr_ch[i].int_post,altr_ch[i].str_city);
				break;

		default:
				break;
	    }
	}
	else								/* out of range of choices */
	    sprintf(av_buf,"");						/* clear segment */
	if ( glEnhSwitch & ENH0008 )
	  mvwprintw(alt_win,row+1,col,"%-64.64s",av_buf);			/* print out choice */
	else
	  mvwprintw(srch_win,row+1,col,"%-62.62s",av_buf);			/* print out choice */
    }
}


/***********************************************************************************************************************************
redisp_scr -
This routine rewrites the info from the call structure to the call entry screen. The correct field to redisplay is determined
by the type of call entry screen.
***********************************************************************************************************************************/
redisp_scr(pck_dst,file_x,piu_ptr)
int pck_dst;
int file_x;
int *piu_ptr;
{
    char frm_buf[READ_BUF_SIZE];					/* temporary buffer for formatting */
    struct cisam_zn *zn_ptr;

    if (scr_name == ALL_CALLS_SCR || scr_name == INDIVIDUAL_CALLS_SCR || scr_name == SUBS_FUTURE_CLS_SCR)
	return(0);

    zn_ptr = (struct cisam_zn *)req_buf;
    zn_ptr->fleet = call_struct.fleet;
    if (pck_dst == PICKUP_ADDR)
		zn_ptr->nbr = call_struct.pckup_zone;
    else
		zn_ptr->nbr = call_struct.dest_zone;

    if ( db(ZONE_FILE_ID,READ_KEYS,&zn_key1,ISEQUAL,0) >= 0 )
	  { 
		if ( zn_ptr->desc[0] != '\0'  && pck_dst == PICKUP_ADDR) 
			strcpy(call_struct.zone_desc,zn_ptr->desc);
      }
/*
 *	fix
 */
	else
	if (pck_dst == DEST_ADDR)
		memset(zn_ptr->desc, '\0', sizeof(zn_ptr->desc));


    get_rate(C_PRINT, YES,&zip1,&zip2); 				/* print the rate from the rate file, if applicable */
    if (scr_name == BASIC_CALL_SCR || scr_name == SUBS_BASIC_SCR){
	if (pck_dst == PICKUP_ADDR) {
    	    attrset(0);								/* unset the underline attribute */
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ADDR_CMNT,CHARS_ADDR_CMNT);
	    mvprintw(B_PKUP_ADDR_CMNT_ROW,B_PKUP_ADDR_CMNT_COL,frm_buf,call_struct.pckup_adr_cmnt);
    	    attrset(A_UNDERLINE);						/* set the underline attribute */

#ifdef NAMERICA
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(B_PKUP_ADDRESS_ROW,B_PKUP_PRE_DIR_COL,frm_buf,call_struct.pckup_pre_dir);
#endif

	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_NAME,CHARS_ST_NAME);
	    mvprintw(B_PKUP_ADDRESS_ROW,B_PKUP_ST_NAME_COL,frm_buf,call_struct.pckup_str_name);

#ifdef NAMERICA
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_TYPE,CHARS_ST_TYPE);
	    mvprintw(B_PKUP_ADDRESS_ROW,B_PKUP_ST_TYPE_COL,frm_buf,call_struct.pckup_str_type);
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(B_PKUP_ADDRESS_ROW,B_PKUP_POST_DIR_COL,frm_buf,call_struct.pckup_post_dir);
#endif
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_CITY,CHARS_CITY);
	    mvprintw(B_PKUP_CITY_ROW,B_PKUP_CITY_COL,frm_buf,call_struct.pckup_city);

	    strncpy(call_struct.pckup_str_key,call_struct.pckup_str_name,4);		/* update street name key field */
	    call_struct.pckup_str_key[4] = '\0';

	    if (call_struct.pckup_zone > 0) {
		mvprintw(B_PKUP_ZONE_ROW,B_PKUP_ZONE_COL,"%-03d",call_struct.pckup_zone);
		call_zoned = 1;
	    	*piu_ptr = B_PKUP_APT_NO;
	    }
	    if (file_x == PLACENM_FILE_ID || file_x == ADDRESS_FILE_ID)
		mvprintw(B_PKUP_ADDRESS_ROW,B_PKUP_ST_NO_COL,"%d",call_struct.pckup_str_nbr);

	    if (file_x == INT_FILE_ID) {
#ifdef NAMERICA
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    	mvprintw(B_INTERS_ROW,B_INTERS_PRE_DIR_COL,frm_buf,call_struct.intr_pre_dir);
#endif
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_NAME,CHARS_ST_NAME);
	    	mvprintw(B_INTERS_ROW,B_INTERS_ST_NAME_COL,frm_buf,call_struct.intr_str_name);
#ifdef NAMERICA
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_TYPE,CHARS_ST_TYPE);
	    	mvprintw(B_INTERS_ROW,B_INTERS_ST_TYPE_COL,frm_buf,call_struct.intr_str_type);
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    	mvprintw(B_INTERS_ROW,B_INTERS_POST_DIR_COL,frm_buf,call_struct.intr_post_dir);
#endif
	    }
		

	    attrset(0);
	    mvaddstr(B_PKUP_ZONE_ROW,B_PKUP_ZONE_COL+6,call_struct.zone_desc);
	}
	else {
    	    attrset(0);								/* unset the underline attribute */
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ADDR_CMNT,CHARS_ADDR_CMNT);
	    mvprintw(B_DEST_ADDR_CMNT_ROW,B_DEST_ADDR_CMNT_COL,frm_buf,call_struct.dest_adr_cmnt);
    	    attrset(A_UNDERLINE);						/* set the underline attribute */
#ifdef NAMERICA
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(B_DEST_ADDRESS_ROW,B_DEST_PRE_DIR_COL,frm_buf,call_struct.dest_pre_dir);
#endif
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_NAME,CHARS_ST_NAME);
	    mvprintw(B_DEST_ADDRESS_ROW,B_DEST_ST_NAME_COL,frm_buf,call_struct.dest_str_name);
#ifdef NAMERICA
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_TYPE,CHARS_ST_TYPE);
	    mvprintw(B_DEST_ADDRESS_ROW,B_DEST_ST_TYPE_COL,frm_buf,call_struct.dest_str_type);
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(B_DEST_ADDRESS_ROW,B_DEST_POST_DIR_COL,frm_buf,call_struct.dest_post_dir);
#endif
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_CITY,CHARS_CITY);
	    mvprintw(B_DEST_CITY_ROW,B_DEST_CITY_COL,frm_buf,call_struct.dest_city);
	    if (call_struct.dest_zone > 0) {
		mvprintw(B_DEST_ZONE_ROW,B_DEST_ZONE_COL,"%-03d",call_struct.dest_zone);
	    	*piu_ptr = B_DEST_APT_NO;
	    }
	    if (file_x == PLACENM_FILE_ID || file_x == ADDRESS_FILE_ID)
		mvprintw(B_DEST_ADDRESS_ROW,B_DEST_ST_NO_COL,"%d",call_struct.dest_str_nbr);

	    if( call_struct.call_rate)
            	mvprintw(B_RATE_ROW,B_RATE_COL,"%7.2f",call_struct.call_rate);
	    attrset(0);
	    mvaddstr(B_DEST_ZONE_ROW, B_DEST_ZONE_COL+6, zn_ptr->desc);
	}
    }
    else if (scr_name == EXTENDED_CALL_SCR || scr_name == SUBS_EXTENDED_SCR) {
	if (pck_dst == PICKUP_ADDR) {
    	    attrset(0);								/* unset the underline attribute */
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ADDR_CMNT,CHARS_ADDR_CMNT);
	    mvprintw(E_PKUP_ADDR_CMNT_ROW,E_PKUP_ADDR_CMNT_COL,frm_buf,call_struct.pckup_adr_cmnt);
    	    attrset(A_UNDERLINE);						/* set the underline attribute */
#ifdef NAMERICA
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(E_PKUP_ADDRESS_ROW,E_PKUP_PRE_DIR_COL,frm_buf,call_struct.pckup_pre_dir);
#endif
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_NAME,CHARS_ST_NAME);
	    mvprintw(E_PKUP_ADDRESS_ROW,E_PKUP_ST_NAME_COL,frm_buf,call_struct.pckup_str_name);
#ifdef NAMERICA
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_TYPE,CHARS_ST_TYPE);
	    mvprintw(E_PKUP_ADDRESS_ROW,E_PKUP_ST_TYPE_COL,frm_buf,call_struct.pckup_str_type);
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(E_PKUP_ADDRESS_ROW,E_PKUP_POST_DIR_COL,frm_buf,call_struct.pckup_post_dir);
#endif
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_CITY,CHARS_CITY);
	    mvprintw(E_PKUP_CITY_ROW,E_PKUP_CITY_COL,frm_buf,call_struct.pckup_city);

	    strncpy(call_struct.pckup_str_key,call_struct.pckup_str_name,4);		/* update street name key field */
	    call_struct.pckup_str_key[4] = '\0';

	    if (call_struct.pckup_zone > 0) {
		mvprintw(E_PKUP_ZONE_ROW,E_PKUP_ZONE_COL,"%d",call_struct.pckup_zone);
		call_zoned = 1;
	    	*piu_ptr = E_PKUP_APT_NO;
	    }
	    if (file_x == PLACENM_FILE_ID || file_x == ADDRESS_FILE_ID)
		mvprintw(E_PKUP_ADDRESS_ROW,E_PKUP_ST_NO_COL,"%d",call_struct.pckup_str_nbr);

	    if (file_x == INT_FILE_ID) {
#ifdef NAMERICA
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    	mvprintw(E_INTERS_ADDRESS_ROW,E_INTERS_PRE_DIR_COL,frm_buf,call_struct.intr_pre_dir);
#endif
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_NAME,CHARS_ST_NAME);
	    	mvprintw(E_INTERS_ADDRESS_ROW,E_INTERS_ST_NAME_COL,frm_buf,call_struct.intr_str_name);
#ifdef NAMERICA
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_TYPE,CHARS_ST_TYPE);
	    	mvprintw(E_INTERS_ADDRESS_ROW,E_INTERS_ST_TYPE_COL,frm_buf,call_struct.intr_str_type);
	    	sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    	mvprintw(E_INTERS_ADDRESS_ROW,E_INTERS_POST_DIR_COL,frm_buf,call_struct.intr_post_dir);
#endif
	    }

	    attrset(0);
	    mvaddstr(E_PKUP_ZONE_ROW,E_PKUP_ZONE_COL+6,call_struct.zone_desc);
	}
	else {
    	    attrset(0);								/* unset the underline attribute */
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ADDR_CMNT,CHARS_ADDR_CMNT);
	    mvprintw(E_DEST_ADDR_CMNT_ROW,E_DEST_ADDR_CMNT_COL,frm_buf,call_struct.dest_adr_cmnt);
    	    attrset(A_UNDERLINE);						/* set the underline attribute */
#ifdef NAMERICA
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(E_DEST_ADDRESS_ROW,E_DEST_PRE_DIR_COL,frm_buf,call_struct.dest_pre_dir);
#endif
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_NAME,CHARS_ST_NAME);
	    mvprintw(E_DEST_ADDRESS_ROW,E_DEST_ST_NAME_COL,frm_buf,call_struct.dest_str_name);
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_TYPE,CHARS_ST_TYPE);
#ifdef NAMERICA
	    mvprintw(E_DEST_ADDRESS_ROW,E_DEST_ST_TYPE_COL,frm_buf,call_struct.dest_str_type);
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_ST_DIR,CHARS_ST_DIR);
	    mvprintw(E_DEST_ADDRESS_ROW,E_DEST_POST_DIR_COL,frm_buf,call_struct.dest_post_dir);
#endif
	    sprintf(frm_buf,"%%-%d.%ds",CHARS_CITY,CHARS_CITY);
	    mvprintw(E_DEST_CITY_ROW,E_DEST_CITY_COL,frm_buf,call_struct.dest_city);
	    if (call_struct.dest_zone > 0) {
		mvprintw(E_DEST_ZONE_ROW,E_DEST_ZONE_COL,"%d",call_struct.dest_zone);
	    	*piu_ptr = E_DEST_APT_NO;
	    }
	    if (file_x == PLACENM_FILE_ID || file_x == ADDRESS_FILE_ID)
		mvprintw(E_DEST_ADDRESS_ROW,E_DEST_ST_NO_COL,"%d",call_struct.dest_str_nbr);

	    if(call_struct.call_rate)
	   	 mvprintw(E_RATE_ROW,E_RATE_COL,"%7.2f",call_struct.call_rate);

	    attrset(0);
	    mvaddstr(E_DEST_ZONE_ROW, E_DEST_ZONE_COL+6, zn_ptr->desc);
	}
    }
    touchwin(stdscr);
    refresh();
}
