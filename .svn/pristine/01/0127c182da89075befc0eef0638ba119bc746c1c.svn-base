static char sz__FILE__[]="@(#)except.c	10.1.2.3(ver) Date Release 5/24/95" ;
/****************************************************************************
*                                                                           *
*                           S C C S   I N F O                               *
*                                                                           *
* @(#)  except.c; Rel: 6.32.0.0; Get date: 2/25/93 at 10:11:00
* @(#)  Last delta: 12/11/92 at 14:01:38
* @(#)  SCCS File: /taxi/sccs/s.except.c
*                                                                           *
* Copyright (c) 1990 - MDI Seattle                                          *
*                                                                           *
*****************************************************************************/

/* Based on R3 version 5.34 */

/* Based on version 6.28 */

#include <stdio.h>
#include <sys/types.h>
#include <memory.h>

#include "taxipak.h"
#include "Object.h"
#include "List_public.h"
#include "Call_public.h"
#include "Call_private.h"
#include "Call_timers_public.h"
#include "Call_lists_public.h"
#include "Vehicle_public.h"
#include "Vehicle_private.h"
#include "Vehicle_lists_public.h"
#include "Driver_public.h"
#include "Fleet_public.h"
#include "Fleet_private.h"
#include "Fleet_lists_public.h"
#include "Zone_public.h"
#include "Zone_private.h"
#include "Zone_lists_public.h"
#include "TimeCalls_public.h"
#include "TimeCalls_private.h"

#include "dispatch_strdefs.h"
#include "path.h"
#include "mad_error.h"
#include "sprintf.h"
#include "mad_ipc.h"
#include "kdt.h"
#include "dispatch.h"
#include "language.h"
#include "except.h"
#include "ui_ipc.h"
#include "user.h"
#include "timers.h"
#include "writer.h"
#include "semops.h"
#include "enhance.h"
#include "switch_ext.h"

#define EXCPT_TYPE_MAX 41

extern time_t mads_time;	/* system time */
extern int semid;
extern char req_buf[];
extern FLEET *fleet[];	/* shared memory fleet structure */
extern struct offsets *offset;	/* offsets of structures in shared memory */
extern long next_except;
extern struct cisam_ch writer_buf;
extern char cur_dt[];
extern char cur_tm[];
extern struct calls *call_pre_process();
extern CALL_REC *get_call_record();
extern char *scratch_ptr;
extern char *last_six();
extern struct exception_count_struct *exception_count;
extern int call_node_err;

struct inc_cnt cnt_buf;		/* buffer for updating count of exceptions */
int    num_excepts = 0;         /* counter for debugging number of exceptions allocatted */
extern struct e_intervals e_interval[];       /* interval blocks */
extern int num_tc;

/*******************************************************************************
* lock_ex - lock the exception structure and remove an exception
*       or set the inuse bit to clear
*******************************************************************************/
RET_STATUS
lock_ex(call_ptr, except_ptr, option)
   struct calls *call_ptr;
   struct excepts *except_ptr;
   int   option;
{

#ifdef DEBUG
   if (offset->prattle >= LEVEL3)
   {
      sprintf(trace_str, "lock_ex : except_ptr %x option %d\n", except_ptr, option);
      TRACE(trace_str);
   }
#endif

   switch (option)
   {
   case LOCK_ON:
     if(SetWriteLock(semid) == -1)
      {
	 ERROR(' ', "", "lock_ex - can't lock it");
	 return (FAIL);
      }
      break;
   case LOCK_OFF:
      if(ReleaseWriteLock(semid) == -1)
      {
	 ERROR(' ', "", "lock_ex - can't unlock it");
	 return (FAIL);
      }
      break;
   case LOCK_REMOVE:		/* remove_except locks and unlocks the
				 * exception */
      if (call_ptr != NULL)
	 call_ptr->except_ptr = NULL;
      remove_except(except_ptr);/* structure for the shortest possible time */
      break;
   case LOCK_FREE:
      if (except_ptr == NULL)
	 return (FAIL);

      if(SetWriteLock(semid) == -1)
      {
	 ERROR(' ', "", "lock_ex - can't lock it");
	 return (FAIL);
      }
      except_ptr->inuse = '0';
      if(ReleaseWriteLock(semid) == -1)
      {
	 ERROR(' ', "", "lock_ex - can't unlock it");
	 return (FAIL);
      }
      break;
   }
   return (SUCCESS);
}

/*******************************************************************************
* bit_check -  check bits in the call exception structure
*******************************************************************************/
bit_check(bit_num, call_ptr)
   int   bit_num;
   struct calls *call_ptr;
{
   unsigned char mask = 1;
   int   whole;
   unsigned char *byte_ptr;

#ifdef DEBUG
   if (offset->prattle >= LEVEL6)
   {
      sprintf(trace_str, "bit_check : bit_num %d call_ptr %x \n", bit_num, call_ptr);
      TRACE(trace_str);
   }
#endif

   if (call_ptr != NULL)
   {
      byte_ptr = (unsigned char *) &call_ptr->status;
      mask = 0x01;
      whole = (bit_num - 1) / 8;/* get the byte offset into the structure */
      byte_ptr += whole;	/* inc to that address */
      whole = bit_num - (whole * 8);	/* get offset into bits */
      mask <<= whole - 1;	/* get a mask for bit offset in byte */
      if (*byte_ptr & mask)	/* if it is set */
	 return (1);
      else
	 return (-1);
   }
   return (-1);
}

/*******************************************************************************
* bit_flip -  flip bits in the call exception structure
*******************************************************************************/
void
bit_flip(bit_num, call_ptr, state)
   int   bit_num;
   struct calls *call_ptr;
   short state;
{
   unsigned char mask = 1;
   int   whole;
   unsigned char *byte_ptr;

#ifdef DEBUG
   if (offset->prattle >= LEVEL6)
   {
      sprintf(trace_str, "bit_flip : bit_num %d call_ptr %x state %d\n", bit_num, call_ptr, state);
      TRACE(trace_str);
   }
#endif

   if (call_ptr != NULL)
   {
      if (bit_num < 0 || bit_num > EXCPT_TYPE_MAX)
      {
	 sprintf(scratch_ptr, "bit_flip - call # %d bit_num %d \n", call_ptr->call_number, bit_num);
	 ERROR(' ', " ", scratch_ptr);
	 return;
      }
      byte_ptr = (unsigned char *) &call_ptr->status;
      mask = 0x01;
      whole = (bit_num - 1) / 8;/* get the byte offset into the structure */
      byte_ptr += whole;	/* inc to that address */
      whole = bit_num - (whole * 8);	/* get offset into bits */
      mask <<= whole - 1;	/* get a mask for bit offset in byte */
      if (state)		/* if set to 1 */
	 *byte_ptr |= mask;	/* set the bit */
      else if (*byte_ptr & mask)/* if it is set */
	 *byte_ptr ^= mask;	/* XOR it off */
   }
}

/*******************************************************************************
* mk_except - generate an exception by placing info in the exception structure
*
* Insure that an emergency cannot get overwritten.
*******************************************************************************/
RET_STATUS
mk_except(call_ptr, veh_ptr, type, info, fleet_nbr)
   struct calls *call_ptr;	/* pointer to a call record */
   struct veh_driv *veh_ptr;	/* pointer to a driver record */
   int type;			/* exception type */
   int   info;			/* eta time, sys error number, message number */
   int fleet_nbr;
{
   struct excepts *excpt;	/* pointer to an exception structure */
   struct excepts *except_ptr;
   struct excepts *pExceptList;
   struct excepts *lExcept;
   int   pri;			/* call priority */
   long  cisam_nbr;
   struct cisam_ch *ch_ptr;	/* pointer to cisam call structure */
   int i;
   short except_calc_priority();
   short bcast_zone = 0;
   int   done, count, except_bit_mismatch;
   BOOLEAN    bCallExcptList = FALSE;
   FLEET_HNDL fleet_hndl;
   ZONE_HNDL  zone_hndl = HNDL_NULL;
   CALLS_EXCPT_LIST_HNDL  calls_excpt_list_hndl;

   /** Stockholm patch - prevent the generation of MULT exceptions
       on Samplan multi-trips
   **/
   if ( ( type == MULT ) && ( call_ptr != NULL ) )
     {
       if ( (ENH0002 & glEnhSwitch) && ( call_ptr->FTJ_nbr > 0 ) )
	 return( FAIL );
     }

   /** Prevent LATEMETER's after PICKUP state **/
   if ( ( call_ptr != NULL ) &&  ( type  == LATE_METER ) &&
        ( Call_get_state( (CALL_HNDL) call_ptr, CALL_PICKUP_STATE ) ) )
     return( FAIL );
       
 
   if (call_ptr != NULL)
     {
       if (bit_check(type, call_ptr) > 0)
	 {
	   if ( (type == NO_SHOW) ||
	        ( type == REQ_TO_TLK ) ||
	        ( type == CALL_TIMEOUT ) )
	     {
	       /** Let's double check the exception list just to make sure **/
	       /** the exception does exist in shared memory               **/
	       lExcept = call_ptr->except_ptr;
	       if ( lExcept == NULL )
		 {
		   except_bit_mismatch = 1;
		   done = 1;
		 }
	       else
		 {
		   done = 0;
		   except_bit_mismatch = 0;
		 }
	       
	       while (  !done )
		 {
		   if ( ( lExcept->call_ptr == call_ptr ) && ( lExcept->type == type ) )
		     {
		       /** Found a matching exception for this call **/
		       /** No need to create new one               **/
		       done = 1;
		     }
		   else
		     {
		       lExcept = lExcept->next;
		       if ( lExcept == NULL )
			 {
			   /** No matching exceptions for this call **/
			   /** eventhough exception bits indicated one **/
			   done = 1;
			   except_bit_mismatch = 1;
			 }
		     }
		 }
	     }
	   
	   if ( !except_bit_mismatch )
	     return(SUCCESS);
	 }   

       if (type != EMERGENCY)
	 bit_flip(type, call_ptr, 1);
       if (call_ptr->except_ptr != NULL && type != MESSAGE && type != NO_SHOW)	/* does this call already have an
						 * exception */
	 {
	   if (type >= call_ptr->except_ptr->type)
	     {
	       if ( ( type == MESSAGE ) && ( veh_ptr != NULL ) ||
		    ( type == ETA ) && ( veh_ptr != NULL ))
		 Veh_set_value( (VEH_HNDL)veh_ptr, VEH_LAST_MSG_NBR, (HNDL)info );
	       return(SUCCESS);
	     }
	   else			/* remove the old exception */
	     if (lock_ex(call_ptr, call_ptr->except_ptr, LOCK_REMOVE) != SUCCESS)
	       return(FAIL);
	 }
     }
   
   excpt = offset->free_except;	/* set up pointer to new except */
   
   if (excpt->next == NULL)
   {				/* if no free except nodes left - big trouble */
      ERROR(' ', "", "mk_except - out of except nodes");	/* core will dump */
      return(FAIL);
   } else			/* else free nodes are still left */
      offset->free_except = excpt->next;	/* set up the pointer to the
						 * next free except node */

   num_excepts++;
   (void) memset((char *) excpt, '\0', sizeof(struct excepts));	/* initialize except
								 * space to nulls */

   /* populate the new except with except information */
   if ((call_ptr != NULL) && (type != EMERGENCY))
   {
      call_ptr->except_ptr = excpt;
      excpt->zone_nbr = call_ptr->pickup_zone;
      Fleet_get_hndl( BY_NBR, call_ptr->fleet, &fleet_hndl );
      excpt->fl_ptr = (struct fleets *)fleet_hndl;
      excpt->super_zone = excpt->fl_ptr->zone_ptr[excpt->zone_nbr]->super_zone;
      excpt->call_ptr = call_ptr;
      excpt->call_nbr = call_ptr->call_number;
      if ( call_ptr->veh_ptr != NULL )
	{
	  excpt->veh_ptr = call_ptr->veh_ptr;
	  excpt->veh_nbr = excpt->veh_ptr->veh_nbr;
	}
   } else if (veh_ptr != NULL)
   {
      excpt->zone_nbr = veh_ptr->zone_num;
      Fleet_get_hndl( BY_NBR, veh_ptr->fleet_nbr, &fleet_hndl );
      excpt->fl_ptr = (struct fleets *)fleet_hndl;      
      excpt->super_zone = excpt->fl_ptr->zone_ptr[excpt->zone_nbr]->super_zone;
      if ( veh_ptr->call_ptr != NULL )
	excpt->call_ptr = veh_ptr->call_ptr;
      else
	excpt->call_ptr = NULL;
      if (type != EMERGENCY)
	excpt->call_nbr = veh_ptr->call_nbr;
      excpt->veh_ptr = veh_ptr;
      excpt->veh_nbr = excpt->veh_ptr->veh_nbr;

      if ( type == EMERGENCY ) // set default values for broadcast
        {
          excpt->emerg_bcast.fleet = fleet[veh_ptr->fleet_nbr]->fleet_id;
          excpt->emerg_bcast.veh_nbr = veh_ptr->veh_nbr;
          excpt->emerg_bcast.active = NO;
          if ( veh_ptr->zone_num > 0 )
            bcast_zone = veh_ptr->zone_num;
          else
            GPS_get_best_zone( (VEH_HNDL) veh_ptr, &bcast_zone );
          
          if ( bcast_zone > 0 ) 
            {
              Zone_get_hndl( bcast_zone, veh_ptr->fleet_nbr, &zone_hndl );
              if ( zone_hndl != HNDL_NULL )
                {
                  if ( ( excpt->emerg_bcast.radius = (short)Zone_get_value( zone_hndl, ZONE_EMERG_RANGE ) ) == 0 )
                    excpt->emerg_bcast.radius = (short)Fleet_get_value( fleet_hndl, FLEET_EMERG_RANGE );
                }
              else
                excpt->emerg_bcast.radius = (short)Fleet_get_value( fleet_hndl, FLEET_EMERG_RANGE );
            }
          else
            excpt->emerg_bcast.radius = (short)Fleet_get_value( fleet_hndl, FLEET_EMERG_RANGE );            
        }
   } else
   {
      if (fleet_nbr >= 0 && fleet_nbr < FLEET_MAX)
	{
	  Fleet_get_hndl( BY_NBR, fleet_nbr, &fleet_hndl );
	  excpt->fl_ptr = (struct fleets *)fleet_hndl;
	}
      excpt->call_ptr = NULL;
      excpt->veh_ptr = NULL;
   }



   /* Assign an appropriate priority to the exception. */
   excpt->priority = except_calc_priority(type, call_ptr);

   pri = excpt->priority;
   excpt->nbr = next_except++;	/* increment the exception number */
   excpt->type = type;
   excpt->status = 0;
   excpt->time_occur = mads_time;
   
   if ( veh_ptr != NULL )
     {
       if ( ( ( type == MESSAGE ) || ( type == ETA ) ) && ( info == 0 ) )
	 info = (long)Veh_get_value( (VEH_HNDL)veh_ptr, VEH_LAST_MSG_NBR );
     }
   
   excpt->info = info;

   if ( excpt->fl_ptr != NULL )
     fleet_hndl = (FLEET_HNDL)excpt->fl_ptr;
   else
     {
       ERROR(' ', "", "mk_except - no fleet ID for exception");
       excpt->next = offset->free_except;
       offset->free_except = excpt;
       return(-1);
     }
    
   if (lock_ex((struct calls *) NULL, (struct excepts *) NULL, LOCK_ON) != SUCCESS) {
      /* Try to clean up after ourselves. */
     if (call_ptr != NULL)
       call_ptr->except_ptr = (struct excepts *) NULL;
      excpt->next = offset->free_except;
      offset->free_except = excpt;
      ERROR(' ', "", "mk_except - could not do LOCK_ON!");
      return(FAIL);
   }

	if(offset->first_except  == NULL){				      /* if the list is empty */      
		offset->first_except = excpt;				   /* make this except the first */
		e_interval[pri].first = excpt;				  /* save the first in the list */
		e_interval[pri].last = excpt;				   /* save the last in the list */
		for(i=0;i< pri;i++)
			e_interval[i].next = pri;			       /* make the left side point to this element */
		for(i=pri + 1;i < EX_PRI_MAX ; i++)
			e_interval[i].prev = pri;			       /* make the right side point to this element */
		excpt->next = NULL;
		excpt->prev = NULL;
	}
	else if(e_interval[pri].next == EOL){   
		if(e_interval[pri].first == NULL){
			e_interval[pri].first = excpt;			  /* save the first in the list */
			for(i=pri + 1;i < EX_PRI_MAX ; i++)
				e_interval[i].prev = pri;		       /* make the right side point to this element */
			for(i=pri -1 ;i >= e_interval[pri].prev; i--)
				e_interval[i].next = pri;		       /* make the left side point to this element */
			excpt->prev = e_interval[e_interval[pri].prev].last;    /* get this excepts prev pointer */
			e_interval[e_interval[pri].prev].last->next = excpt;    /* make the previous node point to this one */
		}
		else{
			excpt->prev = e_interval[pri].last;		     /* get this excepts prev pointer */
			e_interval[pri].last->next = excpt;		     /* make the previous node point to this one */
		}
		excpt->next = NULL;				    /* set up this excepts next pointer */
	}
	else if(e_interval[pri].prev == EOL){   
		if(e_interval[pri].first == NULL){
			e_interval[pri].first = excpt;			  /* save the first in the list */
			for(i=pri -1 ;i >= 0; i--)
				e_interval[i].next = pri;		       /* make the left side point to this element */
			for(i=pri + 1; i<= e_interval[pri].next  ; i++)
				e_interval[i].prev = pri;		       /* set new back pointers */
			offset->first_except = excpt;
			excpt->prev = NULL;				    /* set up this excepts prev pointer */
		}
		else{
			excpt->prev = e_interval[pri].last;		     /* get this excepts prev pointer */
			e_interval[pri].last->next = excpt;		     /* make the previous node point to this one */
		}
		e_interval[e_interval[pri].next].first->prev = excpt;   /* make the next node point to this one */
		excpt->next = e_interval[e_interval[pri].next].first;   /* get this excepts next pointer */
	}
	else if (e_interval[pri].last != NULL){
		excpt->prev = e_interval[pri].last;		     /* get previous pointer for new node */
		excpt->next = e_interval[pri].last->next;	       /* set up next pointer for this node */
		e_interval[pri].last->next = excpt;		     /* set up previous nodes next pointer */
		e_interval[e_interval[pri].next].first->prev = excpt;   /* set up next nodes previous pointer */
	}
	else if( e_interval[pri].last == NULL){
		e_interval[pri].first = excpt;			  /* save the first in the list */
		for(i=pri + 1; i<= e_interval[pri].next  ; i++)
			e_interval[i].prev = pri;		       /* set new back pointers */
		for(i=pri -1 ;i >= e_interval[pri].prev; i--)
			e_interval[i].next = pri;		       /* make the left side point to this element */
		excpt->next = e_interval[e_interval[pri].next].first;   /* get this excepts next pointer */
		excpt->prev = e_interval[e_interval[pri].prev].last;    /* get this excepts prev pointer */
		e_interval[e_interval[pri].next].first->prev = excpt;   /* set up next nodes previous pointer */
		e_interval[e_interval[pri].prev].last->next = excpt;    /* make the previous node point to this one */
	}

	e_interval[pri].last = excpt;				   /* save the last in the list */
   
   if (lock_ex((struct calls *) NULL, (struct excepts *) NULL, LOCK_OFF) != SUCCESS) {

      /* Try to clean up after ourselves. */
      if (call_ptr != NULL)
         (void) lock_ex(call_ptr, excpt, LOCK_REMOVE);
      else
         (void) lock_ex((struct calls *) NULL, (struct excepts *) NULL, LOCK_REMOVE);

      ERROR(' ', "", "mk_except - could not do LOCK_ON!");

      return(FAIL);
   }

   update_exception_count( excpt, excpt->type, 1 );

}

/*******************************************************************************
remove_except - Remove an exception from the exception list
*******************************************************************************/
remove_except(excpt)
   struct excepts *excpt;
{
   int   except_index;
   int i;
   FLEET_HNDL  fleet_hndl;
   int pri;

   if (excpt == NULL)
   {
      ERROR(' ', "", "remove_except - NULL except_ptr");
      return;
   }

  if(SetWriteLock(semid) == -1)
   {
      ERROR(' ', "", "remove_except - can't lock it");
      return;
   }


   excpt->inuse = '0';		/* free it up */

   if (excpt->nbr == 0)
   {
     if(ReleaseWriteLock(semid) == -1)
	 ERROR(' ', "", "remove_except - can't unlock it");
      return;
   }

   --num_excepts;
   
   pri = (int)excpt->priority;	/* exception priority  */


	if(excpt->next == NULL){
		if(excpt->prev == NULL){					/* only one in list */
			for(i=0;i<EX_PRI_MAX;i++){
				e_interval[i].prev = EOL;		       /* clear out interval pointers */
				e_interval[i].next = EOL;
			}
			e_interval[pri].last = NULL;			    /* set no items at this interval */
			e_interval[pri].first = NULL;			   /* set no items at this interval */
		}
		else{
			if( excpt->priority != excpt->prev->priority ){	 /* no other excepts at this interval */
				for(i=e_interval[pri].prev+1;i<EX_PRI_MAX;i++){
					e_interval[i].prev = e_interval[pri].prev;      
					e_interval[i].next = EOL;	       /* clear out interval pointers */
				}
				e_interval[e_interval[pri].prev].next = EOL;
				e_interval[pri].first = NULL;		   /* set no items at this interval */
				e_interval[pri].last = NULL;			    /* set no items at this interval */
			}       
			else
				e_interval[pri].last = excpt->prev;	     /* set last in interval */
			excpt->prev->next = NULL;			       /* skip over this except */     
		}
	}
	else{
		if(excpt->prev == NULL){
			if(excpt->priority != excpt->next->priority){	   /* no other excepts at this interval */
				for(i=0;i<e_interval[pri].next;i++){
					e_interval[i].next = e_interval[pri].next;      /* clear outinterval pointers */
					e_interval[i].prev = EOL;	       /* clear outinterval pointers */
				}
				e_interval[e_interval[pri].next].prev = EOL;
				e_interval[pri].last = NULL;		    /* set no items at this interval */
				e_interval[pri].first = NULL;		   /* set no items at this interval */
			}
			else
				e_interval[pri].first = excpt->next;		    /* make next first at interval */
			excpt->next->prev = NULL;			       /* make next beginning of list */
		}							       /* only one at this interval */
		else if((excpt->priority != excpt->prev->priority) && (excpt->priority != excpt->next->priority)) {
			for(i=pri+1;i<=e_interval[pri].next;i++)
				e_interval[i].prev = e_interval[pri].prev;      /* one at interval in middle of list */ 
			for(i=e_interval[pri].prev;i<=pri-1;i++)
				e_interval[i].next = e_interval[pri].next;      /* clear out interval pointers */
			e_interval[pri].last = NULL;		    /* set no items at this interval */
			e_interval[pri].first = NULL;		   /* set no items at this interval */
			excpt->prev->next = excpt->next;			/* skip over this except */
			excpt->next->prev = excpt->prev;			/* skip over this except */
		}
		else{
			if(excpt == e_interval[pri].first)
				e_interval[pri].first = excpt->next;
			else if(excpt == e_interval[pri].last)
				e_interval[pri].last = excpt->prev;

			excpt->prev->next = excpt->next;			/* skip over this except */
			excpt->next->prev = excpt->prev;			/* skip over this except */
		}
	}
   
	if(excpt == offset->first_except)				       /* always make sure to have the first except */
		offset->first_except = excpt->next;
	excpt->next = offset->free_except;				      /* add the except node to the free list */
	offset->free_except  = excpt;					   /* set newly released except as next avail */
	excpt->nbr = 0;							 /* show the except as not being used */
   
   if(ReleaseWriteLock(semid) == -1)
     ERROR(' ',"","remove_except - can't unlock it");

   update_exception_count(excpt, excpt->type, -1);
}

/*******************************************************************************
* res_except - Resolve an exception after it has been updated by a supervisor.
*
* Use the exception buffer which is populated when the named pipe is read
*******************************************************************************/
res_except(except_buf)
   struct excpt_rec *except_buf;
{
   struct veh_driv *veh_ptr = NULL;	/* pointer to vehicle record */
   struct veh_driv *tmp_veh_ptr;/* pointer to vehicle record */
   struct calls *call_ptr = NULL;	/* pointer to call record */
   static struct call_ipc_rec call_buf;	/* call buffer for passing a call to
					 * add_call */
   struct calls *next_call_ptr;
   CALL_REC *cl_ptr;	/* pointer to a cisam call record */
   FLEET *fl_ptr;
   struct zones *zn_ptr;
   short fl_num;
   FLEET_HNDL fleet_hndl = HNDL_NULL;
   long  tmp_time;
   long  anchor;		/* Stores Anchor call # for mult calls */
   int   excpt_type;
   short exists;
   short save_zone;
   short in_memory = 1;
   short found;
   int timeout;
   int   flag = 0;
   TC_HNDL          tc_hndl, found_tc_hndl = HNDL_NULL;
   TC_STRUCT        *pTimeCall;
   ZONE_TC_LIST_HNDL    tc_list_hndl;
   ZONE_HNDL zone_hndl = HNDL_NULL;


	if (except_buf->resolve_code == R_M_MAN_VEH)
	{
		call_ptr = (struct calls *) Calls_list_find(except_buf->call_nbr);
		if (call_ptr == NULL)
			return;	
		else
			except_buf->resolve_code = (short) R_MAN_VEH;
	}

	if (except_buf->resolve_code == R_CAN_MULT)
	{
		call_ptr = (struct calls *) Calls_list_find(except_buf->call_nbr);
		if (call_ptr == NULL)
			return;
		else
		{
			except_buf->resolve_code = (short)R_APPROVE;
			excpt_type = CALL_CANCEL;
		}
	}

	if ( ( except_buf->except_ptr == NULL ) &&
	     ( except_buf->resolve_code == R_EMERG ) )
	  {
	    if (except_buf->veh_nbr == 0)
	      {
		sprintf(scratch_ptr, "No veh number - code %d", 
			except_buf->resolve_code);
		ERROR(' ',"",scratch_ptr);
		return;
	      }
	  }
	
	else if (except_buf->except_ptr == NULL ||
		(except_buf->resolve_code == R_DISPATCH ||
                 except_buf->resolve_code == R_DISPATCH_ILINK ||
		 except_buf->resolve_code == R_MAN_VEH ||
		 except_buf->resolve_code == R_MAN_ZONE))
	{
		if (except_buf->call_nbr == 0)
		{
			sprintf(scratch_ptr, "No call number - code %d", 
				except_buf->resolve_code);
			ERROR(' ',"",scratch_ptr);
			return;
		}

		call_ptr = (struct calls *) Calls_list_find(except_buf->call_nbr);

		if (call_ptr == NULL)
		{
			in_memory = 0;

			cl_ptr = (CALL_REC *) req_buf;	/* set up for the disk read */
			if (Call_load(&call_buf, (CALL_REC_HNDL)cl_ptr, 
				except_buf->call_nbr) == FAIL)
			{
				if (except_buf->except_ptr != NULL)
				{
					(void)lock_ex(except_buf->except_ptr->call_ptr, 
						except_buf->except_ptr, LOCK_FREE);
				}
				return;
			}

			if ( ( except_buf->resolve_code == R_DISPATCH) ||
                             ( except_buf->resolve_code == R_DISPATCH_ILINK ) )
			{
				(void)lock_ex((struct calls *)NULL, 
					except_buf->except_ptr, LOCK_FREE);

				if ((cl_ptr->veh_nbr != 0) && 
					(strcmp(cl_ptr->status, COMPLETE) != 0))
				{
					if (Fleet_get_hndl(BY_ID, call_buf.fleet, &fleet_hndl) == 
						FAIL)
					{
						ERROR(call_buf.fleet, "", 
							"res_except - fleet does not exist");

						if (except_buf->except_ptr != NULL)
						{
							(void)lock_ex(except_buf->except_ptr->call_ptr, 
								except_buf->except_ptr, LOCK_FREE);
						}
						return;
					}

					fl_num = (short) Fleet_get_value(fleet_hndl, FLEET_NBR);

					if (Veh_get_hndl(BY_NBR, cl_ptr->veh_nbr, fl_num, 
						(VEH_HNDL*)&veh_ptr) == FAIL)
	       			{
						sprintf(scratch_ptr, "res_except - invalid vehicle %d",
							cl_ptr->veh_nbr);
						ERROR(fl_num, "", scratch_ptr);
					} 
					else
					{
                                          if ( except_buf->resolve_code == R_DISPATCH )
                                            Call_redispatch( (CALL_HNDL)Veh_get_value((VEH_HNDL)veh_ptr, VEH_CALL_HNDL), NORMAL_REDISPATCH );                                            
/*
 *						don't look for multiple calls because call is not in
 * 						memory, must be complete
 */
					}
				}

                                if ( except_buf->resolve_code == R_DISPATCH_ILINK )
                                  call_ptr = (struct calls *)Call_initialize(&call_buf, TRUE);
                                else
                                  call_ptr = (struct calls *)Call_initialize(&call_buf, FALSE);
                                

				Call_update_counts((CALL_HNDL)call_ptr, DECREMENT_TODAY);

				return;
			} 
			else
			{
                          // patch here to handle case where Multi-timecall is updated to NOW
                          // with a corresponding change in zone number
                          if ( ( call_buf.call_type.multiple == 1 ) &&
                               ( except_buf->zone_nbr != except_buf->old_zone_nbr ) )
                            {
                              // remove the old TC from the TC_list base on previous zone number
                              if (Fleet_get_hndl( BY_ID, call_buf.fleet, &fleet_hndl ) == FAIL)
                                return;
                              
                              Zone_get_hndl( except_buf->old_zone_nbr, (short)Fleet_get_value(fleet_hndl, FLEET_NBR),
                                             &zone_hndl );
                              if ( zone_hndl != HNDL_ERR )
                                {
                                  tc_list_hndl = (ZONE_TC_LIST_HNDL) Zone_get_value( zone_hndl, ZONE_TC_LIST );
                                  if ( tc_list_hndl != NULL )
                                    {
                                      Zone_tc_list_each_get( tc_list_hndl, tc_hndl )
                                        {
                                          pTimeCall = (TC_STRUCT *)tc_hndl;
                                          if ( pTimeCall->nbr == (int)call_buf.call_nbr )
                                            {
                                              found_tc_hndl = tc_hndl;
                                              break;
                                            }
                                        } Zone_tc_list_each_end(tc_list_hndl)
                                            

                                            if ( found_tc_hndl != HNDL_NULL )
                                              {
                                                Zone_tc_list_remove( tc_list_hndl, found_tc_hndl );
                                                --num_tc;
                                              }
                                    }
                                }
                            }
                              
				if ((call_ptr = 
				     (struct calls *)Call_activate(&call_buf, &exists)) == NULL)
				{
					ERROR(' ', " ", 
					"res_except - could not activate_call, no action taken");

					(void)lock_ex(call_ptr, except_buf->except_ptr, LOCK_FREE);
	       			return;
	    		}

				if (!exists)
					Call_update_counts((CALL_HNDL)call_ptr, DECREMENT_BOTH);

				if (cl_ptr->veh_nbr != 0)
				{
					if (except_buf->resolve_code != R_MAN_VEH)
					{
						if (Veh_get_hndl(BY_NBR, cl_ptr->veh_nbr, 
							call_ptr->fleet, 
							(VEH_HNDL *)&call_ptr->veh_ptr) == FAIL)
						{
							sprintf(scratch_ptr, 
							"fill_call - invalid vehicle %d", cl_ptr->veh_nbr);
							ERROR(call_ptr->fleet, "", scratch_ptr);
						}
					}
				}

				if (except_buf->except_ptr == NULL)
					excpt_type = 0;	/* not sure we care MRB */
				else 
				if (except_buf->except_ptr->type == MFAULT)
					excpt_type = MFAULT;	/* set the exception type */
			}
		}
		else
		{
			/* already have call ptr  */
			if (except_buf->except_ptr != NULL)
			{
				if (call_ptr != except_buf->except_ptr->call_ptr &&
					(except_buf->except_ptr->call_ptr != NULL))
				{
					sprintf(scratch_ptr, 
						"PTR mismatch # %d code %d zone %d enbr %d",
						except_buf->call_nbr, 
						except_buf->resolve_code,
						except_buf->zone_nbr,
						except_buf->except_nbr);
					ERROR(' ',"",scratch_ptr);

					sprintf(scratch_ptr, "  call %d zn %d status %x",
						call_ptr->call_number, call_ptr->pickup_zone,
						call_ptr->status);
					ERROR(' ',"",scratch_ptr);

					if (except_buf->except_ptr->call_ptr != NULL)
					{
						sprintf(scratch_ptr, 
							"  call %d zn %d status %d enbr %d",
							except_buf->except_ptr->call_ptr->call_number,
							except_buf->except_ptr->call_ptr->pickup_zone,
							except_buf->except_ptr->call_ptr->status,
							except_buf->except_ptr->nbr);
						ERROR(' ',"",scratch_ptr);
					}
				}
			}

			if (call_ptr == NULL)
				ERROR(' ', "", "Null call ptr");

			if ( ( except_buf->resolve_code == R_DISPATCH) ||
                             ( except_buf->resolve_code == R_DISPATCH_ILINK ) )
			{
				/* ERROR - this is all screwed up */
				/* need to put he vehicle on call reject list */
				/* DONT WANT TO CANCEL THE CALL */

				(void)lock_ex(call_ptr, except_buf->except_ptr, LOCK_FREE);

				if ((call_ptr->fleet < 0) || 
					(call_ptr->fleet >= FLEET_MAX))
				{
					ERROR(' ',"", "Bad call ptr");
					return;
				}

                                /* This ensures that we don't keep sending a trip over Interlink
                                   if it has been previously returned to us with TIMEOUT */
                                if ( except_buf->resolve_code == R_DISPATCH_ILINK )
                                  Call_redispatch((CALL_HNDL) call_ptr, ILINK_REDISPATCH);
                                else
                                  Call_redispatch((CALL_HNDL) call_ptr, NORMAL_REDISPATCH);

				return;
			} 
			else 
			if (except_buf->except_ptr != NULL)
			{
				excpt_type = except_buf->except_ptr->type;
			}
		}
	}
	else 
	if (except_buf->except_ptr != NULL)
	{
  		if (except_buf->except_ptr->nbr != except_buf->except_nbr)
		{
			sprintf(error_str, "resolved exception for %d code %d", 
				except_buf->call_nbr, except_buf->resolve_code);
			ERROR(' ',"",error_str);

	 		return;
		}

		call_ptr = except_buf->except_ptr->call_ptr;
		excpt_type = except_buf->except_ptr->type;	
	}
	else
		excpt_type = 0;

	exception_distribute(except_buf);
	return;
}

/*--------------------------------------------------------------------
 * except post process 
 *--------------------------------------------------------------------
 */

except_post_process(call_ptr, resolve_code)
   struct calls *call_ptr;
   int   resolve_code;
{
	short num;
	short found;
	CALL_HNDL call_hndl;
	struct except_bits *stptr;
	EXCEPT  *pExcpt;
	BOOLEAN found_except = FALSE, found_hold_type = FALSE;
	FLEET_HNDL  fleet_hndl;

/*
 *	only process calls
 */
	if ( (call_ptr == NULL) || (call_ptr->call_number == 0 ) )
	  return( FAIL );
	
	/*
	 *	no other exceptions for call
	 */
	

/*
 *	no other exceptions for call
 */
	/** don't generate MULTI exceptions if the trip has been offered **/
	if ( ( (num = check_except(call_ptr)) == 0 ) ||
	     ( call_ptr->status.multiple && call_ptr->status.offered ) )
	   
	{
		call_ptr->except_ptr = NULL;

		if ( (short)Call_get_value( (CALL_HNDL) call_ptr, CALL_TYPE_TIME_CALL )  &&
		    (time_t)Call_get_value( (CALL_HNDL) call_ptr, CALL_TC_ACTIVATE_TIME ) == 0 )		    
		{
#ifdef DONT_DO_THIS
			if (call_ptr->veh_ptr != NULL)
				Veh_call_cancel((VEH_HNDL)call_ptr->veh_ptr, 
					(CALL_HNDL) call_ptr);
#endif

			Call_deactivate((CALL_HNDL) call_ptr);

			return( SUCCESS );
		}

		if (resolve_code == R_MAN_ZONE)
		{
			if (call_ptr->veh_ptr == NULL)
			{
				call_ptr->curr_level = 0;
				if ( ( char )Call_get_value( (CALL_HNDL)call_ptr, CALL_PERSONAL_REQUEST_TYPE )
				                             != ONLY_PERS_REQ )				
				  Call_match((CALL_HNDL) call_ptr);
			}
		}
		else 
		if (call_ptr->veh_ptr == NULL)
		{
		  call_ptr->status.available = 1;
		  if ( ( char )Call_get_value( (CALL_HNDL)call_ptr, CALL_PERSONAL_REQUEST_TYPE )
		      != ONLY_PERS_REQ )
		    Dispatcher_call_match((CALL_HNDL) call_ptr);
		}
		else 
		if (call_ptr->veh_ptr->call_ptr == NULL || 
			call_ptr->veh_ptr->call_nbr != call_ptr->call_number)
			Call_deactivate((CALL_HNDL) call_ptr);
	} 
/*
 *	other exceptions for call
 */
	else
	{
		stptr = &call_ptr->status;

		if (stptr->unzoned || 
			stptr->holiday || 
			stptr->call_msg || 
			stptr->multiple ||
			stptr->call_no_msg || 
			stptr->extra_taxis || 
			stptr->call_cancel || 
			stptr->sup_hold)
			call_ptr->status.available = 0;
		else
		{
			if (call_ptr->veh_ptr == NULL)
			{
					call_ptr->status.available = 1;

					if (resolve_code == R_MAN_ZONE) 
						call_ptr->curr_level = 0;
					if ( ( char )Call_get_value( (CALL_HNDL)call_ptr, CALL_PERSONAL_REQUEST_TYPE )
					                            != ONLY_PERS_REQ )
					  Dispatcher_call_match((CALL_HNDL) call_ptr);
			}
		}

		bit_flip(num, call_ptr, 0);
/* 
 *		flip off the bit so that mk_except does not kick us 
 * 		out...THIS IS A PATCH!!!! 
 */
		if ( call_ptr->veh_ptr != NULL )
		  mk_except(call_ptr, (struct veh_driv *) call_ptr->veh_ptr, num, 0, -1);
		else
		  mk_except(call_ptr, (struct veh_driv *) NULL, num, 0, -1);
	}
}

/****************************************************************************************
* except_calc_priority - calculate an acceptable priority for an exception
*
****************************************************************************************/
short
except_calc_priority( int exc_type, CALL_HNDL call_hndl )
{
   short call_priority;

   /* Emergencies have highest priority. */
   if (exc_type == EMERGENCY)
      return(EX_PRI_HIGHEST);

   /* Exceptions without calls have low priority. */
   if ((call_hndl == (CALL_HNDL) NULL) && (exc_type != REQ_TO_TLK))
      return(EX_PRI_LOWEST);

   /* Grab the call priority. */
   call_priority = (short)Call_get_value(call_hndl, CALL_PRIORITY);

   /* Calls with bogus priorities go to the bottom. */
   if ((call_priority < EX_PRI_HIGHEST || call_priority > EX_PRI_LOWEST) &&
       (exc_type != REQ_TO_TLK))
     return(EX_PRI_LOWEST);

   /* Call priority becomes exception priority. */
   if (exc_type != REQ_TO_TLK)
     return(call_priority);
   else
     return(EX_PRI_LOWEST + 1);
}

/*******************************************************************************
* update_exception_count - write messages to counter with changing counts
*******************************************************************************/
update_exception_count(excpt,type,delta)
struct excepts *excpt;
int type;
int delta;
{
  int i, found, super_zone_index, fleet_nbr;

  if (type < 0 || type > EXCPT_TYPE_MAX ||
      excpt == NULL || (excpt->fl_ptr != NULL && excpt->fl_ptr->fleet_nbr != NULL &&
			(excpt->fl_ptr->fleet_nbr < 0 || excpt->fl_ptr->fleet_nbr >= FLEET_MAX)))
    {
      sprintf(scratch_ptr,"update_exception_count - call #=%d type=%d fleet=%d\n",
	      excpt->call_nbr, type, excpt->fl_ptr->fleet_nbr);
      ERROR(' '," ",scratch_ptr);
      return;
    }
  
  if(excpt->fl_ptr != NULL)
    {
      fleet_nbr = excpt->fl_ptr->fleet_nbr;

      /* Exceptions without zones go at end of array */
      if (excpt->super_zone == 0)
	super_zone_index = MAX_EXC_ZONES;
      else
	{
	  /* Find the index of the super zone for the fleet */
	  found = 0;
	  for (super_zone_index = 0; super_zone_index < MAX_EXC_ZONES; super_zone_index ++)
	    {
	      if (excpt->super_zone == fleet[fleet_nbr]->super_zone[super_zone_index].nbr)
		{
		  found = 1;
		  break;
		}
	    }
	  
	  /* If can't find its superzone, stick at end of array */
	  if (!found)
	    super_zone_index = MAX_EXC_ZONES;
	}
    }
      
  /* An exception without a fleet is marked in the last fleet
     and last super_zone slot in the array */
  else
    {
      fleet_nbr = FLEET_MAX;
      super_zone_index = MAX_EXC_ZONES;
    }

  /* Write to exception counter in shared memory */
  exception_count->count[fleet_nbr][type][super_zone_index] += delta;
  if (exception_count->count[fleet_nbr][type][super_zone_index] < 0)
    exception_count->count[fleet_nbr][type][super_zone_index] = 0;

  exception_count->time = time(0);
  
}
