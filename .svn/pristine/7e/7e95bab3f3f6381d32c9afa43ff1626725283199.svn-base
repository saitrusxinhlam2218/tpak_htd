static char sz__FILE__[]="@(#)verify_dt.c	10.1(ver) Date Release 12/2/94" ;
 /****************************************************************************
 *                                                                           *
 *                           S C C S   I N F O                               *
 *                                                                           *
 * @(#)  verify_dt.c; Rel: 10.1.0.0; Get date: 4/18/95 at 16:33:27
 * @(#)  Last delta: 12/2/94 at 11:57:01
 * @(#)  SCCS File: /taxi/sccs/s.verify_dt.c
 *                                                                           *
 *****************************************************************************/

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>
#include <sys/types.h>
#include <sys/timeb.h>

#include "comm_strdefs.h"
#include "call_entry.h"
#include "language.h"

#define TO_DIGIT(c)  ((int) (c - '0'))

/********************************* This is tzfile.h from the sun *********************/

/*	@(#)tzfile.h 1.5 88/02/07 SMI; from Arthur Olson's 3.1	*/

/*
** Information about time zone files.
*/

#define TZDIR		"/usr/share/lib/zoneinfo"	/* Time zone object file directory */

#define TZDEFAULT	"localtime"

/*
** Each file begins with. . .
*/

struct tzhead {
	char	tzh_reserved[32];	/* reserved for future use */
	char	tzh_timecnt[4];		/* coded number of transition times */
	char	tzh_typecnt[4];		/* coded number of local time types */
	char	tzh_charcnt[4];		/* coded number of abbr. chars */
};

/*
** . . .followed by. . .
**
**	tzh_timecnt (char [4])s		coded transition times a la time(2)
**	tzh_timecnt (unsigned char)s	types of local time starting at above
**	tzh_typecnt repetitions of
**		one (char [4])		coded GMT offset in seconds
**		one (unsigned char)	used to set tm_isdt
**		one (unsigned char)	that's an abbreviation list index
**	tzh_charcnt (char)s		'\0'-terminated zone abbreviaton strings
*/

/*
** In the current implementation, "tzset()" refuses to deal with files that
** exceed any of the limits below.
*/

/*
** The TZ_MAX_TIMES value below is enough to handle a bit more than a
** year's worth of solar time (corrected daily to the nearest second) or
** 138 years of Pacific Presidential Election time
** (where there are three time zone transitions every fourth year).
*/
#define TZ_MAX_TIMES	370

#ifndef NOSOLAR
#define TZ_MAX_TYPES	256	/* Limited by what (unsigned char)'s can hold */
#else /* !NOSOLAR */
#define TZ_MAX_TYPES	10	/* Maximum number of local time types */
#endif /* !NOSOLAR */

#define TZ_MAX_CHARS	50	/* Maximum number of abbreviation characters */

#define SECS_PER_MIN	60
#define MINS_PER_HOUR	60
#define HOURS_PER_DAY	24
#define DAYS_PER_WEEK	7
#define DAYS_PER_NYEAR	365
#define DAYS_PER_LYEAR	366
#define SECS_PER_HOUR	(SECS_PER_MIN * MINS_PER_HOUR)
#define SECS_PER_DAY	((long) SECS_PER_HOUR * HOURS_PER_DAY)
#define MONS_PER_YEAR	12

#define TM_SUNDAY	0
#define TM_MONDAY	1
#define TM_TUESDAY	2
#define TM_WEDNESDAY	3
#define TM_THURSDAY	4
#define TM_FRIDAY	5
#define TM_SATURDAY	6

#define TM_JANUARY	0
#define TM_FEBRUARY	1
#define TM_MARCH	2
#define TM_APRIL	3
#define TM_MAY		4
#define TM_JUNE		5
#define TM_JULY		6
#define TM_AUGUST	7
#define TM_SEPTEMBER	8
#define TM_OCTOBER	9
#define TM_NOVEMBER	10
#define TM_DECEMBER	11
#define TM_SUNDAY	0

#define TM_YEAR_BASE	1900

#define EPOCH_YEAR	1970
#define EPOCH_WDAY	TM_THURSDAY

/*
** Accurate only for the past couple of centuries;
** that will probably do.
*/

#define isleap(y) (((y) % 4) == 0 && ((y) % 100) != 0 || ((y) % 400) == 0) || ((y) == 100)


/**************************** End of tzfile.h ************************************/

/************************************************ Beginning of timemk.c ************/

/* To fix bug TC0010 - the problem with the time changes removed the function that */
/* was used timemk, which was really strange, and called instead the system fcn    */
/* mktime.  Did this after calling tzset to set the timezone information and then  */
/* the tm_isdst flag to -1, telling the system to figure out if daylight savings   */
/* time exsits or not.   Done by Rob Tyson Mar 01/94                               */

time_t
timelocal(timeptr)
struct tm *     timeptr;
{
	return mktime(timeptr);	/* will return -1 if the time doesn't exist like hour skipped in spring time change */	
}
/************************************************ end of timemk.c ************/

#define		MIN_DATE_CHARS	6  			/* min # of chars allowed for date entry */
#define		MIN_TIME_CHARS	4
#define		NOON_TIME	"11:59a"		/* NOON */
#define		MIDN_TIME	"11:59p"		/* MIDNIGHT */

/* ----------------------------------------------------------------------------------------------------------------------------	*
 * verify_dt.c: contains verify_date() and verify_time routines used by "ui" and various df_maint programs			*
 * ---------------------------------------------------------------------------------------------------------------------------- */

/* days_in_month: returns the # of days in month mm, in year yy */
int days_in_month(mm,yy)
int mm;	/* month */
int yy;	/* year */
{
    
    static int days[] = {31,28,31,30,31,30,31,31,30,31,30,31};
    
    /* if month is not FEB, return # of days */
    if ( mm != 2 )
	return(days[mm-1]);
    else {
	/* month is FEB; if its a leap yaer, then return 29,
	 * else return 28
	 */
	if ( ( yy % 4 == 0  && yy % 100 != 0 ) || ( yy % 400 == 0 ) || ( yy == 100 )  ) 
	    /* its a  leap year */
	    return(29);
	else 
	    /* its not a leap year */
	    return(28);
    }  /* end else ... FEB */
    
}  /* end days_in_month() */


/* verify_date: verifys the date entered by the user;  valid formats
 *	are a) mm/dd/yy  b) mm dd yy  where mm & dd can be 1 or 2 digits.
 *	c) mmddyy ... where mm, dd and yy should be 2 digits, since no
 *	seperator is specified
 *	Returns:   -1 if date entered is not valid
 *		    1	if date entered is valid
 */
int verify_date(read_buf, dest_ptr)
char *read_buf;	/* pointer to the buffer with input */
char *dest_ptr;	/* pointer to the buffer in which the formatted 
		 * date in mm dd yy format is saved, if dest_ptr
		 * is not NULL */
{
    char s_day[3], s_month[3], s_year[3];
    char *s, *first_sep, *second_sep;
    int  i, len;
    int  all_spaces;
    char now_string[16];
    int day, month, year;

    strcpy(now_string, NOW);

#ifdef NAMERICA
    strcpy(now_string, "NO/W");
#endif
    
    /* If empty or "NOW", then now */
    if (read_buf[0] == '\0' || strncmp(read_buf, now_string, strlen(now_string)) == 0) {
	get_pkup_date(dest_ptr);				/* default to now date */
	return(1);
    }

    len = strlen(read_buf);
    
    /* If all spaces, then now */
    all_spaces = 1;
    for (i = 0; i < len && i < CHARS_DATE; i ++)
	if (read_buf[i] != ' ') {
	    all_spaces = 0;
	    break;
	}
    if (all_spaces) {
	get_pkup_date(dest_ptr);				/* default to now date */
	return(1);
    }
    
    
    /* Check for dates with date seperators */
    if ((first_sep = strchr(read_buf, DATE_SEPERATOR)) != NULL) {
	
	/* At most there are 8 chars (11/28/90)
	 * and a minimum of 6 chars (1/5/90) for a date with seperator */
	if (len < 6 || len > 8)
	    return(-1);
	
	/* There must be another seperator */
	if ((second_sep = strchr(first_sep + 1, DATE_SEPERATOR)) == NULL)
	    return(-1);
	
	for (s = read_buf; *s != '\0'; s ++) {
	    
	    /* Skip over seperators */
	    if (s == first_sep || s == second_sep)
		continue;
	    
	    /* Rest of read_buf should be digits */
	    if (!isdigit(*s))
		return(-1);
	}
	
	/* Get pieces of date. Note that atoi() will
	 * stop at first non-digit */
	if (DATE_FORMAT == DAY_FIRST_IN_DATE) { 
	    day = atoi(read_buf);
	    month = atoi(first_sep + 1);
	    year = atoi(second_sep + 1);
	}
	else if (DATE_FORMAT == YEAR_FIRST_IN_DATE) { 
	    year  = atoi(read_buf);
	    month = atoi(first_sep + 1);
	    day   = atoi(second_sep + 1);
	}
	else {
	    month = atoi(read_buf);
	    day = atoi(first_sep + 1);
	    year = atoi(second_sep + 1);
	}
    }
    
    else { /* No seperator in date */
	
	if (len != 6)
	    return(-1);
	
	for (i = 0; i < len; i ++)
	    if (!isdigit(read_buf[i]) && read_buf[i] != ' ')
		return(-1);
	
	if (DATE_FORMAT == YEAR_FIRST_IN_DATE) 
	{
		s_year[0]  = read_buf[0];
		s_year[1]  = read_buf[1];
		s_year[2]  = '\0';

		s_month[0] = read_buf[2];
		s_month[1] = read_buf[3];
		s_month[2] = '\0';

		s_day[0]   = read_buf[4];
		s_day[1]   = read_buf[5];
		s_day[2]   = '\0';
	}
	else
	{
	    if (DATE_FORMAT == DAY_FIRST_IN_DATE) {
	    	s_day[0] = read_buf[0];
	    	s_day[1] = read_buf[1];
	    	s_day[2] = '\0';
	    
	    	s_month[0] = read_buf[2];
	    	s_month[1] = read_buf[3];
	    	s_month[2] = '\0';
	    }
	    else {
	    	s_day[0] = read_buf[2];
	    	s_day[1] = read_buf[3];
	    	s_day[2] = '\0';
	   	 
	    	s_month[0] = read_buf[0];
	    	s_month[1] = read_buf[1];
	    	s_month[2] = '\0';
	    }
	
	    s_year[0] = read_buf[4];
	    s_year[1] = read_buf[5];
	    s_year[2] = '\0';
	}
	
	day = atoi(s_day);
	month = atoi(s_month);
	year = atoi(s_year);
    }
    
    
    if (year < 0 || year > 99)
      return(-1);

    if (day > days_in_month(month, year) || day < 1)
	return(-1);
    
    if (month < 1 || month > 12)
	return(-1);
    
    
    if (DATE_FORMAT == DAY_FIRST_IN_DATE)
	sprintf(dest_ptr, "%02d%c%02d%c%02d", day, DATE_SEPERATOR, month, DATE_SEPERATOR, year);
    else if (DATE_FORMAT == YEAR_FIRST_IN_DATE)
	sprintf(dest_ptr, "%02d%c%02d%c%02d", year, DATE_SEPERATOR, month, DATE_SEPERATOR, day);
    else
	sprintf(dest_ptr, "%02d%c%02d%c%02d", month, DATE_SEPERATOR, day, DATE_SEPERATOR, year);
    
    return(0);
    
}  /* end verify_date() */

/************************************************************************/
/* verify_time: verifys the time entered by the user;  valid formats	*/
/*	are: 	hh:mmp 							*/
/*	    	hh:mma  where hh & mm can be 1 or 2 digits.		*/
/*		hhmm ... where hh, mm should be 2 digits, since no	*/
/*			 seperator is specified				*/
/*	Returns:   -1 if time entered is not valid			*/
/*		    1	if time entered is valid 			*/
/************************************************************************/
int verify_time(read_buf, dest_ptr)
char *read_buf;			/* pointer to the buffer with input */
char *dest_ptr;			/* pointer to the buffer in which the formatted time in hh mm format is saved */
{
    char am_or_pm;
    int  i, len, all_spaces;
    char s_hour[3], s_min[3];
    char now_string[16];
    
    int hour_12, hour, minute, colon_pos;
    char *colon;
    
    strcpy(now_string, NOW);
    
    
    /* If empty or "NOW", then now */
    if (read_buf[0] == '\0' || strncmp(read_buf, now_string, strlen(now_string)) == 0) {
	get_pkup_time(dest_ptr);				/* default to now time */
	return(1);
    }
    
    len = strlen(read_buf);
    
    /* If all spaces, then now */
    all_spaces = 1;
    for (i = 0; i < len && i < CHARS_TIME; i ++)
	if (read_buf[i] != ' ') {
	    all_spaces = 0;
	    break;
	}
    if (all_spaces) {
	get_pkup_time(dest_ptr);				/* default to now time */
	return(1);
    }
    
    
#ifdef HR12
    else if (strncmp(read_buf, "NOON", 4) == 0) {
	strcpy(dest_ptr, NOON_TIME);			/* default to noon time (12:00p) */
	return(0);
    }
    
    else if (strncmp(read_buf, "MIDN", 4) == 0) {
	strcpy(dest_ptr, MIDN_TIME); 		/* default to midnight time (12:00a) */
	return(0);
    }
#endif
    
#ifdef HR12
    hour_12 = 1;
#else
    hour_12 = 0;
#endif
    
    if ((colon = strchr(read_buf, ':')) != NULL) {
	
	colon_pos = (int) (colon - read_buf);
	
	/* Colon must be at "x:xx" or "xx:xx" */
	
	if (colon_pos == 1) {
	    
	    /* Check for digits in their proper place */
	    if (!isdigit(read_buf[0]) ||
		!isdigit(read_buf[2]) ||
		!isdigit(read_buf[3]))
		return(-1);
	    
	    /* Check proper length and am/pm (if necessary) */
	    if (hour_12) {
		if (len != 5)
		    return(-1);
		am_or_pm = read_buf[4];
		if (am_or_pm != 'A' && am_or_pm != 'P' && am_or_pm != 'a' && am_or_pm != 'p')
		    return(-1);
	    }
	    else /* hour 24 */
		if (len != 4)
		    return(-1);
	    
	    hour = TO_DIGIT(read_buf[0]);
	    minute = TO_DIGIT(read_buf[2]) * 10 + TO_DIGIT(read_buf[3]);
	}
	else if (colon_pos == 2) {
	    
	    /* Check for digits in their proper place */
	    if (!isdigit(read_buf[0]) ||
		!isdigit(read_buf[1]) ||
		!isdigit(read_buf[3]) ||
		!isdigit(read_buf[4]))
		return(-1);
	    
	    /* Check proper length and am/pm (if necessary) */
	    if (hour_12) {
		if (len != 6)
		    return(-1);
		am_or_pm = read_buf[5];
		if (am_or_pm != 'A' && am_or_pm != 'P' && am_or_pm != 'a' && am_or_pm != 'p')
		    return(-1);
	    }
	    else /* hour 24 */
		if (len != 5)
		    return(-1);
	    
	    hour = TO_DIGIT(read_buf[0]) * 10 + TO_DIGIT(read_buf[1]);
	    minute = TO_DIGIT(read_buf[3]) * 10 + TO_DIGIT(read_buf[4]);
	}
	else
	    /* Colon in wrong place */
	    return(-1);
	
    }
    else { /* No ':' in time */
	
	/* First 3 chars must be digits */
	if (!isdigit(read_buf[0]) ||
	    !isdigit(read_buf[1]) ||
	    !isdigit(read_buf[2]))
	    return(-1);
	
	/* Check for time with 3 digits that is followed
	 * by an am/pm (for 12 hour time) */
	if ((hour_12 && len == 4) ||
	    (!hour_12 && len == 3)) {
	    
	    /* Time must be "xxxa" or "xxxxa".
	     * 'a' is for am/pm */
	    
	    if (hour_12) {
		am_or_pm = read_buf[3];
		if (am_or_pm != 'A' && am_or_pm != 'P' && am_or_pm != 'a' && am_or_pm != 'p')
		    return(-1);
	    }
	    hour = TO_DIGIT(read_buf[0]);
	    minute = TO_DIGIT(read_buf[1]) * 10 + TO_DIGIT(read_buf[2]);
	}
	
	/* Check for time with 4 digits that is followed
	 * by an am/pm (for 12 hour time) */
	else if ((hour_12 && len == 5) ||
		 (!hour_12 && len == 4)) {
	    
	    /* Check to see if 4th char is digit */
	    if (!isdigit(read_buf[3]))
		return(-1);
	    
	    if (hour_12) {
		am_or_pm = read_buf[4];
		if (am_or_pm != 'A' && am_or_pm != 'P' && am_or_pm != 'a' && am_or_pm != 'p')
		    return(-1);
	    }
	    
	    hour = TO_DIGIT(read_buf[0]) * 10 + TO_DIGIT(read_buf[1]);
	    minute = TO_DIGIT(read_buf[2]) * 10 + TO_DIGIT(read_buf[3]);
	}
	else /* Wrong len */
	    return(-1);
    }
    
    
#ifdef HR12
    if (hour < 1 || hour > 12 || minute < 0 || minute > 59)
	return(-1);
    
    sprintf(dest_ptr, "%02d:%02d%c", hour, minute, Toupper(am_or_pm));
    return(1);
#else
    if (hour < 0 || hour > 23 || minute < 0 || minute > 59)
	return(-1);
    
    sprintf(dest_ptr, "%02d:%02d", hour, minute);
    return(1);
#endif
    
}  									/* end verify_time() */
/******************************************************************************
* convert YYMMDDhhmmss to a long.
* returns - 0 if invalid argument (date/time format is passed)
*	  - the time in internal C format as strored by Unix
******************************************************************************/
long conversion(date_time) 
char date_time[13];
{
    
    struct tm t;
    struct tm *t_now;
    time_t now_time = 0;
    long tl;
    int  i;

    bzero( &t, sizeof(struct tm) );
    if (strlen(date_time) != 12) 
	/* invalid format for date/time passed to function */
	return(0);
    
    for(i=0; i<12; i++)
	if (date_time[i] < '0' || date_time[i] > '9')	
	    /* char passed should all be digits; are not */
	    return(0);

    if (TO_DIGIT(date_time[0]) * 10 + TO_DIGIT(date_time[1]) < 80 )
      t.tm_year = (TO_DIGIT(date_time[0]) * 10 + TO_DIGIT(date_time[1]) + 100 );
    else
      t.tm_year = (TO_DIGIT(date_time[0]) * 10 + TO_DIGIT(date_time[1]));          
    t.tm_mon = TO_DIGIT(date_time[2]) * 10 + TO_DIGIT(date_time[3]) - 1;
    t.tm_mday = TO_DIGIT(date_time[4]) * 10 + TO_DIGIT(date_time[5]);
    t.tm_hour = TO_DIGIT(date_time[6]) * 10 + TO_DIGIT(date_time[7]);
    t.tm_min = TO_DIGIT(date_time[8]) * 10 + TO_DIGIT(date_time[9]);
    t.tm_sec = TO_DIGIT(date_time[10]) * 10 + TO_DIGIT(date_time[11]);
    
    if (t.tm_year < 70 ||
	t.tm_mon < 0 || t.tm_mon > 11 ||
	t.tm_mday < 1 || t.tm_mday > days_in_month(t.tm_mon + 1, t.tm_year) ||
	t.tm_hour > 23 ||
	t.tm_min > 59 ||
	t.tm_sec > 59)
	return(0);

    now_time = (time_t)time(NULL);
    t_now = localtime(&now_time);

    t.tm_isdst = t_now->tm_isdst;
    
    tl = mktime(&t);
    
    return(tl);
    
}  /* End of conversion()  */


