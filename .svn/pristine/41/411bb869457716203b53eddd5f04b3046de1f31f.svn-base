/***********************************************************************
*                 RCS INFO
*
*  @(#)  $RCSfile: ac_client.c,v $
*  @(#)  $Revision: 1.2 $
*  @(#)  $Date: 1998/07/23 17:52:30 $
*  @(#)  $Author: root $
*  @(#)  $Source: /taxi-scan/taxi_proj/cvs/taxi-scan/src/auto_call/ac_client.c,v $
*
*  Copyright (c) 1994 - MobileSoft Consulting, Inc. Woodinville WA
*
***********************************************************************/

static char rcsid[] = "$Id: ac_client.c,v 1.2 1998/07/23 17:52:30 root Exp $";

#include <stdio.h>
#include <errno.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/un.h>
#include <netdb.h>
#include <sys/param.h>
#include <sys/time.h>
#include <sys/utsname.h>
#include "AutoCall_private.h"

#define PORT_TES_SERVER         6990
#define SERVICE_TES_SERVER      "TES_svc"
#define HOST_TES_SERVER         "tyson"

/*- Application header present in all PLANET-T80 telegrams -*/
typedef struct pt_appl_head {
    unsigned short tgmno;	/* Telegram number */
    short    arc;		/* Application Return Code */
    char   aet [70];	/* Application Error Text */
    } PT_APPL_HEAD;

main()
{
  struct hostent *pHent;
  struct servent *pSent;
  struct utsname hname;
  int num_socket;
  struct sockaddr_in sinRemote;

  char tmp_buf[12];
  int send_length, rc;
  AC_MSG       *ClientMsg;
  TES_MSG      *TESMsg;
  char         APIMsg[ BUFSIZ ];
  int          msg_length, TES_type;
  char         msgType[ TES_TYPE_LEN + 1 ];
  char         RecvBuf[ BUFSIZ ];
  char         *pRecvBuf;
  int          done = 0;


  bzero( RecvBuf, sizeof( RecvBuf ) );
  
  uname( &hname );

  
  pSent = getservbyname( SERVICE_TES_SERVER, "tcp" );
  if ( pSent == NULL )
    {
      printf( "Error acquiring tcb network service\n");
      exit(-1 );
    }
  else sinRemote.sin_port = pSent->s_port;

  if ( ( num_socket = socket( AF_INET, SOCK_STREAM, 0 ) ) < 0 )
    {
      printf( "Error acquiring socket\n");
      exit(-1);
    }

  sinRemote.sin_family = AF_INET;

  pHent = gethostbyname( HOST_TES_SERVER );
  if ( pHent == NULL )
    {
      close( num_socket );
      printf("Error acquiring host name \n" );
      exit( -1 );
    }

  memcpy( &sinRemote.sin_addr, pHent->h_addr_list[0], sizeof( struct in_addr ) );

  if ( connect( num_socket,
	       ( struct sockaddr * ) &sinRemote,
	       sizeof( struct sockaddr ) ) == -1 )
    {
      close( num_socket );
      printf( "Error performing connect\n" );
      return ( -1 );
    }

  done = 0;
  while ( !done )
    {
      printf( "Enter AutoCall API Message --> " );
      gets( APIMsg );


      SendAutoCall( num_socket, APIMsg );

      bzero( RecvBuf, sizeof( RecvBuf ) );
      if ( ( rc = read( num_socket, RecvBuf, AC_MSG_SIZE_LEN ) ) <= 0 )
	exit ( -1 );
      
      msg_length = (int) strtol( RecvBuf, ( char ** ) 0, 16 );
      pRecvBuf = &RecvBuf[2];
      if ( ( rc = read( num_socket, pRecvBuf, 1 ) ) <= 0 )
	exit ( -1 );
      pRecvBuf = &RecvBuf[3];
      if ( ( rc = read( num_socket, pRecvBuf, msg_length ) ) < 0 )
	exit( -1 );

      printf("--> %s\n", RecvBuf );
    }
      
  close( num_socket );
}

SendAutoCall( sClient, pTESMsg )
     int       sClient;
     TES_MSG   *pTESMsg;
{
  int         msg_length,rc, i=0;
  AC_MSG      MsgAutoCall;

  msg_length = TES_TYPE_LEN;
  while ( pTESMsg->TESdata[i] != NULL )
    {
      ++i;
      ++msg_length;
    }

  ++msg_length;
  sprintf( MsgAutoCall.MsgSize, "%02x", msg_length );
  MsgAutoCall.MsgSize[ AC_MSG_SIZE_LEN ] = '\0';
  MsgAutoCall.MsgPort = '3';  /* hard coded for testing */
  memcpy( MsgAutoCall.MsgTES, pTESMsg->TEStype, TES_TYPE_LEN );
  memcpy( &MsgAutoCall.MsgTES[ TES_TYPE_LEN ], pTESMsg->TESdata, msg_length - 1 );

  rc = send( sClient, &MsgAutoCall, msg_length + 2, 0 );
}
