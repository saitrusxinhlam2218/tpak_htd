#if ( ENGLISH )
static char szTP_LANG[]="@(#)LANG = English" ;
#elif ( DANISH  )
static char szTP_LANG[]="@(#)LANG = Danish" ;
#elif ( FINNISH )
static char szTP_LANG[]="@(#)LANG = Finnish" ;
#elif ( GERMAN )
static char szTP_LANG[]="@(#)LANG = German" ;
#elif ( FRENCH )
static char szTP_LANG[]="@(#)LANG = French" ;
#elif ( SWEDISH )
static char szTP_LANG[]="@(#)LANG = Swedish" ;
#endif

static char sz__FILE__[]="@(#)dispatch.c  10.1.2.1(ver) Date Release 12/2/94" ;
/****************************************************************************
*                                                                           *
*                           S C C S   I N F O                               *
*                                                                           *
* @(#)  dispatch.c; Rel: 10.1.2.1; Get date: 5/11/95 at 10:14:01		            *			
* @(#)  Last delta: 12/2/94 at 18:37:20						    *	
* @(#)  SCCS File: /taxi/sccs/s.dispatch.c							    *
* @(#)  dispatch.c; Rel: 10.1.2.1; Get date: 5/11/95 at 10:14:01
* @(#)  Last delta: 12/2/94 at 18:37:20
* @(#)  SCCS File: /taxi/sccs/s.dispatch.c
*                                                                           *
* Copyright (c) 1994 - TaxiCom ApS					    *
*                                                                           *
*****************************************************************************/

#include <stdio.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/times.h>
#include <time.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/shm.h>
#include <errno.h>
#include <sys/sysinfo.h>
#ifdef __alpha
#include <sys/proc.h>
#endif

#include "taxipak.h"
#include "Object.h"
#include "List_public.h"
#define DECLARING
#include "comm_strdefs.h"
#include "dispatch_strdefs.h"
#include "writer_strdefs.h"
#include "ccp_strdefs.h"
#include "mads_types.h"
#include "sprintf.h"
#include "mad_error.h"
#include "except.h"
#include "calls.h"
#include "Call_public.h"
#include "Call_lists_public.h"
#include "Call_db.h"
#include "Call_hist_db.h"
#include "Fleet_public.h"
#include "Fleet_private.h"
#include "Vehicle_public.h"
#include "Vehicle_private.h"
#include "Vehicle_db.h"
#include "Driver_db.h"
#include "Exception_private.h"
#include "mad_ipc.h"
#include "ui_ipc.h"
#include "timers.h"
#include "menu.h"
#include "acc.h"
#include "veh_driv.h"
#include "user.h"
#include "dispatch.h"
#include "path.h"
#include "taxi_db.h"
#include "language.h"
#include "ccp_strdefs.h"
#include "enhance.h"

#include "List_public.h"
#include "Call_lists_public.h"
#include "Timer_public.h"

#include "Ilink_private.h"

/* New Object stuff */
extern CALLS_LIST_HNDL calls_list;


/* File for credit verification transactions (declared in kdt_3.c) */
extern FILE *credit_fp;
extern FILE *receipt_fp;

time_t mads_time;				/* system time update in main dispatch loop */
short time_ticks;		/* for unique queue positioning */
int call_buf_size=BUFSIZ;			/* size of call buffer */
int kdt_msgs_max = 75;				/* number of maximum messages read at a time by kdt */
int max_ipc_msgs=1;				/* number of ipc requests processed at a time */
int veh_used;					/* number of vehicle used in system at current time */
int menus_used;					/* number of menus used in system at current time */
int user_pipe_fd;				/* file descriptor of user interface pipe */
int gps_pipe_fd;
int ilink_pipe_fd;
int shmid;					/* identifier of shared memory */
int semid;					/* identifier for semaphore array */
char *shmptr; 					/* ptr returned from shmat() call */
struct offsets *offset;				/* offsets of structures in shared memory */
struct fleets *fleet[FLEET_MAX];		/* shared memory fleet structure */
struct e_intervals e_interval[EX_PRI_MAX];  	/* interval record blocks for exceptions */
long next_except=1;                             /* internal exception numbers */

int warm_start=0;
int   test_data = 0;
int ncp_stat=1;					/* status of ncp - default to 1*/
int prattle_level = 0;				/* set command line prattle level to zero until told otherwise */

/* The following defines are used by the mdt character mapping code in msg_mmp.c	*/
/* if they are changed here they must also be changed in mmp_msg.c ... until we		*/
/* set up some approriate global include files						*/
#define MDT_MAP_LENGTH  128 
#define E_SUCCESS       0 
#define E_FAILURE       1 

int mdt_char_mapping = 0;			/* mdt output character mapping - default to disabled */
char mdt_map[MDT_MAP_LENGTH];

char *scratch_ptr;
int dis_msgqid;					/* id from message q used by user interface */
int pi_msgqid;
#ifndef FALSE
#define FALSE 0
#define TRUE 1
#endif
int ok_stats_flg = FALSE;                       /* msg rate stats */
int stop_stc_p2=FALSE;		/*temporary way to disable STC PII if necessary*/
int dump_core;

int pkt_mem = 0;

long glEnhSwitch;

void	kdt_init();
void	kdt_interface(void);
void	start_repeat_timer_functions(int);
int     discard_old_pkt_entries();
int   biz_status_report();
int   TC_process();
int   day_end();
int   stat_usr_drv_funcs();
int   hourly_tasks();
int   test_drive();
int  taxipak_process = DISPATCH;
short debug_state = FALSE;

extern cleanup();				/* define the cleanup function for signal() */
void start_cleanup();				/* define the cleanup function for signal() */


#define SEC_IN_DAY	(60 * 60 * 24)	/* seconds in day */

/****************************************************************************
*			Meat and Potatoes
*****************************************************************************/
main(argc,argv)
int argc;
char **argv;
{
	int i;						/* counter */
	int sysinfobuf[2];
        char nlspath[80];
        static char put_nlspath[80];
        int  putenv();
	
	struct timers timer_buf;			/* timer record */
	int event_time;
	int loop_count = 0;
	static char msg_buf[1024];
	time_t secs_to_hour;				/* holds seconds to next hour */
	time_t tmp_time;
	void write_file_with_dispatch_pid();
	void kill_dispatch();

	signal(SIGHUP,SIG_IGN);		        	/* ignore the following signals */
	signal(SIGINT,SIG_IGN);
	signal(SIGQUIT,SIG_IGN);
	signal(SIGTERM,start_cleanup);
	signal(SIGUSR1,start_cleanup);   		/* cleanup and leave after signal */
	signal(SIGUSR2,kill_dispatch);   		/* catch signal from monitor to kill dispatch */

	sigsetmask(0);                                  /* no blocking */

	/** Disable printing of UAC messages **/
	/** veh_driv shared memory struct    **/
	/** causes UAC messages when used on **/
	/** ALPHA-D-UNIX...fix later         **/
#ifdef __alpha
	sysinfobuf[0] = SSIN_UACPROC;
	sysinfobuf[1] = UAC_NOPRINT;
	i = setsysinfo( SSI_NVPAIRS, sysinfobuf, 1, NULL, NULL, 0 );
#endif

        /* init language environment using manager's profile and open catalogs */
#ifdef DEBUG
	printf ("\nLanguage is %s\n", LANGUAGE);

#endif

	/* cleanup() will only dump core if dump_core is TRUE */
	dump_core = TRUE;
	Timer_services_start(&mads_time);



 	if (enh(&glEnhSwitch) < 0)			/* Initialize the enhancement switch */
 	{
 		ERROR(' '," ","Enhancemnet Switch");
 		cleanup();
 	}

	if ( ENH0011 & glEnhSwitch )
	  Call_msg_services_start();
	
        init_mgr_locale();
	 strcpy(nlspath, "/usr/taxi/catalogs/finnish/%N.cat");
	 sprintf(put_nlspath, "NLSPATH=%s", nlspath);
	 putenv(put_nlspath);
	 setlocale(LC_ALL,"");
	 
        open_catalog(&COMMON_m_catd, "common", 0, 0);
        open_catalog(&DISPATCH_catd, "dispatch", 0, 0);
        open_catalog(&WRITER_catd, "writer", 0, 0);
	if (ENH0001 & glEnhSwitch)
        	open_catalog(&CCP_catd, "ccp", 0, 0);

#ifdef DEBUG								/* open up trace file if in debug mode */
	if((trace_fp=fopen(TRACE_FILE,"a")) == NULL){
		ERROR(' '," ",TRACE_FILE);
		cleanup();
	}

	/* Make trace file world readable and writable */
	chmod(TRACE_FILE, 00666);

#endif

	mads_time = time((time_t *)0);					/* update the system time */
	time_ticks = 0;
	parse_cmd(argc,argv);						/* get command line arguments  and set variables */

	if (check_if_another_dispatch_is_up() == -1)
	  {
	    printf("Dispatch is already running. Cannot start a new one.\n");
	    exit(0);
	  }

	calls_list = Calls_list_create();
	
	open_db_files();						/* open the database files */
        open_bad_acct_file();
	kdt_init(warm_start);
	//	init_file_system_check();
	write_file_with_dispatch_pid();
	if((semid = semget(SEMKEY,NSEMS, 0666 | IPC_CREAT)) < 0){
		ERROR(' ',"","can't create semaphore queue for dispatch.");
		cleanup();
	}

	if ((gps_pipe_fd=open(GPS_PIPE,O_RDWR | O_NDELAY)) < 0 )
	  ERROR(' ', " ","Problem with opening GPS pipe" );

	init_pkt_ids();

	if ( test_data )
	  (void) Timer_create(
			      TIMER_TYPE, T_TEST_DRIVE,
			      TIMER_EXPIRE_TIME, 60,
			      TIMER_NOTIFY_FUNC, test_drive,
			      ATTRIBUTE_END);	
	
	init(warm_start, prattle_level);						/* build structures and initialize node pools */
	
	warm_start = 0;

 	if (ENH0001 & glEnhSwitch)
 	{
 		OpenCCPPipes();
 		printf("CCP pipes opened\n");
	}

	if((user_pipe_fd=open(USER_PIPE,O_RDWR | O_NDELAY)) < 0 ){	/* open up pipe communication to user interface */
		ERROR(' '," ",USER_PIPE);
		cleanup();
	}


        if ( ( ilink_pipe_fd = open( INTERLINK_PIPE, O_RDWR | O_NDELAY ) ) < 0 )
          {
            ERROR(' ', "", "No Interlink pipe active");
          }


	if ((dis_msgqid = msgget (MSGKEY, 0666 | IPC_CREAT )) < 0){
		ERROR(' '," ","can't create message queue for dispatch.");
		cleanup();
	}

	while (msgrcv (dis_msgqid, (struct msgbuf *)msg_buf, sizeof msg_buf , -32767L, IPC_NOWAIT) > 0);

	  {
	    if ((pi_msgqid = msgget( PI_MSGKEY, 0666 | IPC_CREAT )) < 0)
	      {
		ERROR(' '," ", "Can't create message queue for PI");
		cleanup();
	      }
	    while (msgrcv(pi_msgqid, (struct msgbuf *)msg_buf, sizeof msg_buf, -32767L, IPC_NOWAIT) > 0);
	  }

	event_time = get_day_end_tm();

		
		(void) Timer_create(
			    TIMER_TYPE, T_DAY_END,
			    TIMER_EXPIRE_TIME, event_time,
			    TIMER_NOTIFY_FUNC, day_end,
			    ATTRIBUTE_END);

	(void) Timer_create(
			    TIMER_TYPE, T_HOURLY_TASKS,
			    TIMER_EXPIRE_TIME, 3600,
			    TIMER_NOTIFY_FUNC, hourly_tasks,
			    ATTRIBUTE_END);
	
	secs_to_hour = 3600L - (time((time_t *)0) % 3600L);
	
	(void) Timer_create(
			    TIMER_TYPE, T_USR_DRV_STAT,
			    TIMER_EXPIRE_TIME, DRV_STATS_PERIOD,
			    TIMER_NOTIFY_FUNC, stat_usr_drv_funcs,
			    ATTRIBUTE_END);
	
	(void) Timer_create(
			    TIMER_TYPE, T_KDT_STATS,
			    TIMER_EXPIRE_TIME, secs_to_hour + 30,
			    TIMER_NOTIFY_FUNC, discard_old_pkt_entries,
			    ATTRIBUTE_END);

	if (ENH0008 & glEnhSwitch)
	  (void) Timer_create(
			      TIMER_TYPE, T_BIZ_STATUS,
			      TIMER_EXPIRE_TIME, 60,
			      TIMER_NOTIFY_FUNC, biz_status_report,
			      ATTRIBUTE_END);

	(void) Timer_create(
			    TIMER_TYPE, T_TIMECALLS,
			    TIMER_EXPIRE_TIME, 60,
			    TIMER_NOTIFY_FUNC, TC_process,
			    ATTRIBUTE_END );

	fprintf(stdout,"Initialization Complete.\n");

	for(i=0;i<FLEET_MAX;i++){ 
		start_repeat_timer_functions(i);
		
	}

	offset->status.dispatch = 1;					/* set dispatch to run */
	offset->status.ncp = ncp_stat;					/* set ncp  */

	
	while(offset->status.dispatch){ 				/* run dispatch while flag is on */
                CheckInWithMonitor();						/* check for monitor token tek*/
		tmp_time = time((time_t *)0);
		if ( tmp_time > mads_time )
		  time_ticks = 0;
		
		mads_time = tmp_time;

		read_pipe();					/* check if  call or exception entered system */
		get_msg();					/* check if a message is in the message queue */
		kdt_interface();				/* process KDT messages */
		Timer_service(TIMER_ALL_TIMERS);

	}

	dump_core = FALSE;
	cleanup();							/* cleanup before exit */

	return(0);
}

/* This function write to file the process id of the dispatch process.
   This file is read in by UI to see if dispatch is still running.
   A future enhancement of this function would be to make sure another
   dispatch is not already running. */
void
write_file_with_dispatch_pid()
{
	FILE *fd;
			
	if ((fd = fopen(DISPATCH_PID_FILE, "w")) == NULL)
	{
		fprintf(stderr, "%s: %s", "Can't open file", DISPATCH_PID_FILE);
		return;
	}
	fchmod(fileno(fd), 0666);
									 
	fprintf(fd, "%d\n", getpid());
	fclose(fd);
}

void start_repeat_timer_functions(int fleet_nbr)
{
  int   delay;
  double drand48();
  
	if( fleet[fleet_nbr]->active == YES)
	{
		if (fleet[fleet_nbr]->zone_info_freq)
		  {
		    delay = (int) fleet[fleet_nbr]->zone_info_freq * drand48();
		    Fleet_make_search_report( fleet_nbr, delay );
		  }
		if (fleet[fleet_nbr]->zone_status_update_freq)
		  Fleet_zone_summary( fleet_nbr );
		if (fleet[fleet_nbr]->stats_compute_freq)
		  Fleet_update_pickup_stats( fleet_nbr );
		if (fleet[fleet_nbr]->inactive_retry_interval)
		  inactivity_logout(fleet_nbr);
		if (fleet[fleet_nbr]->stand_ntfy_interval)
		  Fleet_make_stand_notify_report(fleet_nbr);
	}
}
										  
/****************************************************************************
* parse_cmd - get the options specified on the command line
*****************************************************************************/
parse_cmd(argc,argv)
int argc;
char **argv;
{
	int c;
	char version[80];
	extern char *optarg;

        while((c = getopt(argc,argv,"d:m:c:k:i:lp:swn?hvte")) != -1)	/*added e option for temporary disableing of STC PII if necessary*/
		switch(c){
                case    'd':    if ( optarg == NULL )
                                        prattle_level = 0;
                                else
                                {
                                        prattle_level = atoi(optarg);
                                        if ( prattle_level < 0 || prattle_level > 10 )
                                                prattle_level = 0;
				}
				(void)fprintf(stderr, "Prattle level set to %d\n", prattle_level);
				break;
   
		case	'm':	if ( optarg == NULL )
				{
					(void)fprintf(stderr, "Invalid MDT character map [EMPTY MAP], mapping disabled\n");
					break;
				}

				if ( set_mdtmap(optarg) )
					(void)fprintf(stderr, "Invalid MDT character map [%s], mapping disabled\n", optarg);
				else
					(void)fprintf(stderr, "MDT character mapping enabled [%s]\n", optarg);
				break;
		case    't':    set_TopLightOn();
                                break;
		case	'w':	warm_start = 1;
				(void)fprintf(stderr,"warm_start\n");
				break;
		case	'c':	call_buf_size = atoi(optarg);
				(void)fprintf(stderr,"call_buf_size = %d bytes\n",call_buf_size);
				break;
		case	'i':	max_ipc_msgs = atoi(optarg);					/* # of msgs read at a time */
				(void)fprintf(stderr,"max_ipc_msgs = %d \n",max_ipc_msgs);
				break;
		case	'k':	kdt_msgs_max = atoi(optarg);
				(void)fprintf(stderr,"kdt_msgs_max = %d \n",kdt_msgs_max);	/* # of kdt msgs read at a time */
				break;
                case    's':    ok_stats_flg = TRUE;
                                (void) fprintf(stderr,"printing msg rate stats\n");
                                break;
		case	'n':	ncp_stat = 0;
				(void)fprintf(stderr,"no ncp\n");
				break;
		case 	'p':	nice(-1 * (atoi(optarg)));
				(void)fprintf(stderr,"nice value = %d \n",atoi(optarg));
				break;
		case 	'l':
		                test_data = 1;
		                (void) fprintf( stderr, "Load random test data\n" );
				break;

                case    'e':    stop_stc_p2 = TRUE;			/*temporary way to disable STC PII if necessary*/
                                (void) fprintf(stderr,"Stopping STC PII from functioning\n");
                                break;

		case	'v':
		                sprintf(version, "Last built: ");
		  
		  		/* Add on the SCCS date and time information (it is only filled
				   in when file is updated */
		  		strcat(version, "11/12/91 at 13:26:11\n");

		  		/* If no '%' than SCCS expanded the 6/3/91 and 09:26:46 */
		  		if (strchr(version, '%') == NULL)
				  printf(version);
		  		else
		  		  printf("No version data (must be checked into SCCS first)\n");
		  		exit(0);

		case	'?':
		case	'h':	(void)fprintf(stderr,"-w : warm start\n");
				(void)fprintf(stderr,"-c (call buffer size): set call buffer size\n");
				(void)fprintf(stderr,"-d (level): set prattle to level at startup\n");
				(void)fprintf(stderr,"-k (kdt messages to process per interface call): set kdt msgs to process\n");
				(void)fprintf(stderr,"-i (ipc messages to process per msg_get): set msgs to process\n");
				(void)fprintf(stderr,"-l : lock process, text, data \n");
				(void)fprintf(stderr,"-n : do not send messages to ncp\n");
				(void)fprintf(stderr,"-m \"mdt character map\" : map outbound MDT messages with specified character map.\n");
				(void)fprintf(stderr,"-px : set dispatch priority  to run x below 20\n");
				(void)fprintf(stderr,"-t  : set dispatch to send packet to MDT to turn on top light when ACK on offer is returned\n");
				(void)fprintf(stderr,"-v : print date of last build and exit\n");
				exit(0);

		default:
		  		break;
		}
				
}

/****************************************************************************
* open_db_files - open database files to remain open for the life of dispatch
*****************************************************************************/
open_db_files()
{
	if (db(CALLH_FILE_ID,OPEN,&ch_key1,ISINOUT+ISMANULOCK,0) < 0) {	/* open CALLH file */
		ERROR(' ',CALLH_FILE,"Error opening file\n");
		cleanup();
	}

	if (db(DRIVER_FILE_ID,OPEN,&dr_key1,ISINOUT+ISMANULOCK,0) < 0) {	/* open DRIVER file */
		ERROR(' ',DRIVER_FILE,"Error opening file\n");
		cleanup();
	}

	if (db(CALL_FILE_ID,OPEN,&cl_key1,ISINOUT+ISMANULOCK,0) < 0) {	/* open CALL file */
		ERROR(' ',CALL_FILE,"Error opening file\n");
		cleanup();
	}

	if (db(VEHICLE_FILE_ID,OPEN,&veh_key2,ISINOUT+ISMANULOCK,0) < 0) {	/* open VEHICLE file */
		ERROR(' ',VEHICLE_FILE,"Error opening file\n");
		cleanup();
	}

	if (db(MAILBOX_FILE_ID, OPEN, 0, ISINOUT+ISMANULOCK, 0) < 0) {	/* open MAILBOX file */
		ERROR(' ',MAILBOX_FILE,"Error opening file\n");
		cleanup();
	}

	if (db(MSGLOG_FILE_ID, OPEN, 0, ISINOUT+ISMANULOCK, 0) < 0) {	/* open MSGLOG file */
		ERROR(' ',MSGLOG_FILE,"Error opening file\n");
		cleanup();
	}
	
}

/****************************************************************************
* cleanup - remove shared memory segment when the process terminates
*****************************************************************************/
cleanup()
{
	register i;

	if (db(CALLH_FILE_ID,CLOSE,&ch_key1,0,0) < 0) {				/* close CALLH file */
		ERROR(' ',CALLH_FILE,"Error closing file\n");
	}

	if (db(DRIVER_FILE_ID,CLOSE,&dr_key1,0,0) < 0) {			/* close DRIVER file */
		ERROR(' ',DRIVER_FILE,"Error closing file\n");
	}

	if (db(VEHICLE_FILE_ID,CLOSE,&veh_key2,0,0) < 0) {			/* close VEHICLE file */
		ERROR(' ',VEHICLE_FILE,"Error closing file\n");
	}

	if (db(CALL_FILE_ID,CLOSE,&cl_key1,0,0) < 0) {				/* close CALL file */
		ERROR(' ',CALL_FILE,"Error closing file\n");
	}

	plock(0);								/* unlock */
	close(user_pipe_fd);							/* close the user pipe */

#ifdef DEBUG
	if (trace_fp)
	  fclose(trace_fp);							/* close the trace file */
#endif

        catclose(DISPATCH_catd);                                                /* close language catalogs */
        catclose(WRITER_catd);
        catclose(COMMON_m_catd);
	if (ENH0001 & glEnhSwitch)
        	catclose(CCP_catd);

	/* Close credit transaction file */
	if (credit_fp)
	  fclose(credit_fp);
  
        /* close the receipt log */
        if (receipt_fp)
           fclose(receipt_fp);

	/* Die and dump core */
	if (dump_core)
	  abort();
}

/****************************************************************************
* kill_dispatch this is the signal handler for monitor to kill dispatch  
*****************************************************************************/
void
kill_dispatch()
{
	kill(getpid(),SIGBUS);		/*send dispatch a sigbus so he will core out*/
}

/****************************************************************************
* start_cleanup
*****************************************************************************/
void
start_cleanup()
{
	offset->status.dispatch = 0;						/* do controlled cleanup */
}

/****************************************************************************
* get_day_end_tm - find out when to start the day end cleanup
*****************************************************************************/
get_day_end_tm()
{

	int now_time, now_hours;
	extern char *ctime();
	int day_end_tm;							/* end of the day time */
	int day_end_hr;
	int day_end_min;
	int day_end_tot;
	char *time_str;

	get_syscntl(&day_end_tm);
	mads_time = time((time_t *)0);					/* update the system time */
	time_ticks = 0;
	time_str = ctime(&mads_time);

	sprintf(scratch_ptr,"%c%c",*(time_str+11),*(time_str+12));	/* get hours */
/** Why display?	 puts(scratch_ptr); */
	now_hours =  3600 * atoi(scratch_ptr);
	sprintf(scratch_ptr,"%c%c",*(time_str+14),*(time_str+15));	/* get minutes */
/** Why display?	puts(scratch_ptr); */
	now_time = 60 * atoi(scratch_ptr);
	now_time +=  now_hours;						/* get hours and minutes together in seconds */

	day_end_hr = day_end_tm / 100;
	day_end_min = day_end_tm - (day_end_hr * 100);
	day_end_tot = (day_end_hr * 3600) + (day_end_min * 60);		/* total in seconds */

	if( day_end_tot > now_time)
		return( day_end_tot - now_time);			/* coming up on it */
	else
		return( ((3600 * 24) - now_time) + day_end_tot);		/* just passed it, do it next time */

}

/*
  Return -1 if there's already a dispatch out there
          0 if there is isn't
 */
int
check_if_another_dispatch_is_up()
{
  FILE *fd;
  int  rc;
  int  dispatch_pid;

  /* No DISPATCH_PID_FILE should mean no dispatch has
     run on the systen yet. */
  if ((fd = fopen(DISPATCH_PID_FILE, "r")) == NULL)
    return(0);

  fscanf(fd, "%d", &dispatch_pid);
  fclose(fd);

  /* Check if dispatch PID is still up. kill(pid, 0) returns
     a -1 and an errno of ESRCH if the PID does not exist */
  rc = kill(dispatch_pid, 0);
  if (rc == -1 && errno == ESRCH)
    return(0);
  return(-1);
}

int
CheckInWithMonitor()
{
  offset->status.poll_dispatch = 1;
  return(SUCCESS);
}

/******************************************************************************
* day_end - do day end processing
******************************************************************************/
day_end()
{
	register i,j,k;
	struct fleets *fl_ptr;
	struct excepts *excpt;
	time_t  event_time;
	struct calls *call_ptr;
	CALL_HNDL call_hndl;
	
	excpt = offset->first_except;						/* remove 2 day old excepts */
	while(excpt != NULL)
	{
               if ( excpt->nbr != 0 )                  /* don't try to remove the exception if there isn't one */
		  if((excpt->time_occur + SEC_IN_DAY * 2) < mads_time)	/* remove 2 day old excepts */
			lock_ex(NULL,excpt,LOCK_REMOVE);		/* remove it from exc. list */
		
		excpt = excpt->next;
	}

	Calls_list_each_get(call_hndl)
	  {
	    call_ptr = (struct calls *) call_hndl;
	    if ((call_ptr != NULL) && ((call_ptr->due_time + SEC_IN_DAY) <= mads_time))
	      {
		Call_cancel((CALL_HNDL) call_ptr, (VEH_HNDL) call_ptr->veh_ptr, TRUE, 0); /* probably no veh_ptr */
	      }
	  }
	Calls_list_each_end	

	for(i=0;i<FLEET_MAX;i++)
	  Fleet_initialize(i);

	event_time = get_day_end_tm();
		(void) Timer_create(
			    TIMER_TYPE, T_DAY_END,
			    TIMER_EXPIRE_TIME, event_time,
			    TIMER_NOTIFY_FUNC, day_end,
			    ATTRIBUTE_END);




}


