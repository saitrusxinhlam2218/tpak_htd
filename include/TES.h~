/***********************************************************************
 *                 RCS INFO
 *
 *  @(#)  $RCSfile: TES.h,v $
 *  @(#)  $Revision: 1.4 $
 *  @(#)  $Date: 2003/01/28 18:10:15 $
 *  @(#)  $Author: jwelch $
 *  @(#)  $Source: /taxi-scan/taxi_proj/cvs/taxi-scan/src/include/TES.h,v $
 *
 *  Copyright (c) 1994 - MobileSoft Consulting, Inc. Woodinville WA
 *
 ***********************************************************************/
#ident "@(#) head:$RCSfile: TES.h,v $   $Revision: 1.4 $"

#ifndef __TES_h__
#define __TES_h__

#include <sys/types.h>
#include "taxipak.h"
#include "db.h"
#include "taxi_db.h"
#include "Object.h"
#include "Address.h"
#include "Account.h"
#include "Minitel.h"

#define DRIVER_ATTR_LEN          32
#define COLOR_LEN               10
#define GENERAL_COMMENTS_LEN    64
#define MINITEL_SUBZONE_LEN      6
#define MODEL_LEN               10
#define PASSENGER_NAME_LEN      20
#define PICKUP_COMMENTS_LEN     30
#define STREET_NAME_ENTRY_TYPE  '0'
#define VEHICLE_ATTR_LEN         32
#define CALL_INFO_STATUS_LEN     8
#define SUB_ACCT_LEN             4

/* Return codes for TES_call_status() */
#define TES_CLOSED      0
#define TES_ACTIVE      1
#define TES_DISPATCHED  2

/* Define something to mark calls as generated by Minitel */
#define MINITEL_USER_ID -20

/****************************** Address.h ******************************/

typedef struct _cust_location_
{
  char          name[PASSENGER_NAME_LEN + 1];
  POST_ADDRESS  address;
  char          place_name[ MINITEL_PLACE_NAME_LEN + 1];
  char          phone_nbr[MINITEL_PHONE_NBR_LEN + 1];
  char          phone_ext[MINITEL_PHONE_EXT_LEN + 1];
} CUST_LOCATION;


/****************************** Attributes.h ***************************/

typedef struct _attributes
{
  char          driver[ DRIVER_ATTR_LEN + 1 ];
  char          vehicle[ VEHICLE_ATTR_LEN + 1 ];
} ATTRIBUTES;



/****************************** Call.h ******************************/
typedef struct _call_pickup
{
  time_t        due_date_time;
  short         wait_time;              /* in minutes */
  CUST_LOCATION cust;
  int           zone;
  ATTRIBUTES    requested_attributes;
  char          pickup_comments[  PICKUP_COMMENTS_LEN  + 1 ];
  char          general_comments[ GENERAL_COMMENTS_LEN + 1 ];
} CALL_PICKUP;

typedef struct _call_info
{
  char          fleet;
  int           call_nbr;
  CALL_PICKUP   pickup;
  int           priority;
  char          account_nbr[G7_ACCOUNT_NBR_LEN + 1];
  short         account_type;
  char          sub_acct[SUB_ACCT_LEN  + 1];
  char          status[CALL_INFO_STATUS_LEN + 1];
  short         vehicle_nbr;
  short         personal_veh;
  time_t        originate_date_time;
  char          can_charge;
  char          requested_by[ PASSENGER_NAME_LEN + 1];
  short         nbr_in_group;
  short         pos_in_group;
  POST_ADDRESS  dest;
} CALL_INFO;

/****************************** Driver.h ******************************/
typedef struct _driver_
{
  char          fleet;
  int           nbr;
} DRIVER;


typedef struct _driver_info
{
  short         vehicle_nbr;
  char          shift;
  POST_ADDRESS home_address;
} DRIVER_INFO;


/****************************** Period.h ******************************/
/* start & end of the form hhmm */
typedef struct _period
{
  int           start,
    end;
} PERIOD;


/******************************** Geo.h ********************************/
typedef struct _geo_rec
{
  char          entry_type;                       /* 0 Street, 1 Place */
  char          name[ MINITEL_STREET_NAME_LEN + 1 ];
  char          street_type[ MINITEL_STREET_TYPE_LEN + 1 ];
  int           index;
} GEO_REC;


/****************************** Locality.h ******************************/
typedef struct _city
{
  char          code[ MINITEL_CITY_ALIAS_LEN + 1 ];
  char          name[ MINITEL_CITY_NAME_LEN  + 1 ];
  char          subzone[ MINITEL_SUBZONE_LEN + 1 ];
} CITY;


/****************************** Vehicle.h ******************************/

typedef struct _vehicle_id
{
  char          fleet;
  int           nbr;
} VEHICLE_ID;

typedef struct _vehicle_info
{
  VEHICLE_ID    id;
  char          attributes[ VEHICLE_ATTR_LEN + 1 ];
  char          model[MODEL_LEN + 1 ];
  char          color[COLOR_LEN + 1 ];
} VEHICLE_INFO;


/***************************** Zone.h *** ***************************/

typedef struct _zone_
{
  char          fleet;
  int           nbr;
} MT_ZONE;


/************************** Function Headers ************************/

POST_ADDRESS *TES_get_account_address(ACCOUNT_ID *,
                                      int,
                                      POST_ADDRESS *,
                                      MINITEL_PHONE *);
char TES_get_access_key(short);
int TES_get_priority(short);
int TES_get_required_points(char, time_t, char);
void *TES_call_open_age_filter(void *, int);
void *TES_call_open_attribute_filter(void *, ATTRIBUTES *);
int TES_call_cancel(int);
int TES_call_close_list(void *);
int TES_call_create(CALL_INFO *, int);
void *TES_call_open_filtered_list(char,               /* fleet */
                                  time_t,       /* start_time */
                                  int,          /* interval_duration */
                                  int[],        /* zones[] */
                                  int,          /* margin */
                                  int,          /*min_call_age */
                                  ATTRIBUTES *  /* attributes */
                                  );
CALL_INFO *TES_call_get_info(int,CALL_INFO *);
void TES_call_info_to_rec(CALL_INFO *, void *);
void *TES_call_open_margin_filter(void *, int);
void *TES_call_open_list(char, time_t, int);
CALL_INFO *TES_call_read_filtered_list(void *, CALL_INFO *);
CALL_INFO *TES_call_rec_to_info(HNDL, CALL_INFO *);
int TES_call_update(int, CALL_INFO *);
void *TES_call_open_zone_filter(void *, int   *);
DRIVER_INFO *TES_driver_get_info(DRIVER *, DRIVER_INFO *);
PERIOD *TES_get_night_limits(char, PERIOD *);
void TES_geo_close_list(void **);
void *TES_geo_open_list(char *);
GEO_REC *TES_geo_read_list(void *, GEO_REC *);
int TES_zone_address(char, POST_ADDRESS *);
BOOLEAN TES_is_holiday(time_t);
void TES_city_close_list(void **);
char *TES_city_get_name_from_abbrev(char *, char *);
char *TES_city_get_name_from_index(int, char *);
void *TES_city_open_list(char *);
CITY *TES_city_read_list(void *, CITY *);
POST_ADDRESS *TES_place_get_address(int, POST_ADDRESS *);

/************************ Error codes *****************/

#define TES_ERR_NO_HOME_ZONE            200
#define TES_ERR_BACKUP_ZONES            201
#define TES_ERR_DRIVER_OPEN             202
#define TES_ERR_DRIVER_READ             203
#define TES_ERR_VEHICLE_OPEN            204
#define TES_ERR_VEHICLE_READ            205
#define TES_ERR_CALL_OPEN               206
#define TES_ERR_CALL_ALREADY_CANCELLED  207
#define TES_ERR_CANT_TELL_DISPATCH      208
#define TES_ERR_NO_DISPATCH             209
#define TES_ERR_CANT_ZONE               210
#define TES_ERR_ACCOUNT_READ            211
#define TES_ERR_NOT_ENOUGH_POINTS       212
#define TES_ERR_CANT_DEDUCT_POINTS      213
#define TES_ERR_CANT_GET_POINT_INFO     214
#define TES_ERR_NO_RESERVATION_ALLOWED  215
#define TES_ERR_SEND_TO_DISPATCH_FAILED 216
#define TES_ERR_MISSING_STREET_NAME     217
#define TES_ERR_MISSING_CITY_NAME       218
#define TES_ERR_NO_ACCOUNT              219

#endif
