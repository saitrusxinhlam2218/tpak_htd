static char sz__FILE__[]="@(#)crit_un.c	10.1.2.1(ver) Date Release 12/2/94" ;
 /****************************************************************************
 *                                                                           *
 *                           S C C S   I N F O                               *
 *                                                                           *
 * @(#)  crit_un.c; Rel: 10.1.2.1; Get date: 4/19/95 at 08:47:52
 * @(#)  Last delta: 12/2/94 at 18:04:27
 * @(#)  SCCS File: /taxi/sccs/s.crit_un.c
 *                                                                           *
 *****************************************************************************/


#include <cursesX.h>
#include <sys/types.h>
#include "ui_strdefs.h"
#include "mads_types.h"
#include <isam.h>
#include "df_maint.h"
#include "mads_isam.h"
#include "time.h"
#include "call_entry.h"
#define SRCH_EXTERNS
#include "srch.h"
#include "srch_const.h"
#include "screens.h"
#include "ui_def.h"
#include "func_keys.h"
#include "ui_error.h"

#define		START_UNASSIGNED_PROMPT		9	/* place prompt on start fleet field when reading selection criteria */

extern struct scr_flds srch_un_flds[];
extern struct keydesc cl_key4;
extern struct keydesc *ptr_srch_key;
extern int matches_index;				/* for matches function */
extern int end_unassigned_srch;
extern int     scr_name;
extern WINDOW *srch_win;				/* window used for search selection criteria */

extern long get_internal_time();
extern int verify_date(), verify_time();

/* declare functions for checking fleet permissions */
extern int ui_fleet_perms0(), ui_fleet_perms1(), ui_fleet_perms2(), 
	ui_fleet_perms3(), ui_fleet_perms4(), ui_fleet_perms5(), 
	ui_fleet_perms6(), ui_fleet_perms7();

/* declare array of pointers to functions for checking fleet perm's */
extern int (*ui_fleet_perms[])();

extern long srch_dt_tm;				/* Used in actual search */
extern short clear_err_flag;

/*******************************************************************************/
/* criteria_unassigned: Displays the window with for selecting the search      */
/*			criteria. Reads the selection criteria entered         */
/*			by the call taker for unassigned calls search 	       */
/*******************************************************************************/
criteria_unassigned(ptr_criteria)
struct select_criterias *ptr_criteria; 			/* pointer to structure for saving selection criteria */
{
	int ck_unassigned_dummy(), ck_unassigned_fleet(), 
	ck_unassigned_date(), ck_unassigned_time(),
	ck_unassigned_street(), ck_unassigned_name(),
	ck_unassigned_phone1(), ck_unassigned_phone2(),
	ck_unassigned_charge();
								/* declare pointers to functions (which check the fields entered */
	 							/* for the searches selection criteria) */
	 							/* Note: these functions are similar to the field_check routines  */
	 							/* for call entry */
	static int (*check_unassigned_flds[])() = { 
		ck_unassigned_dummy, ck_unassigned_fleet, ck_unassigned_fleet, 
		ck_unassigned_fleet, ck_unassigned_fleet, ck_unassigned_fleet, 
		ck_unassigned_fleet, ck_unassigned_fleet, ck_unassigned_fleet, 
		ck_unassigned_date, ck_unassigned_time};

	int piu;						/* prompt in use; used by read_field() */
	int end_criteria_unassigned = 0; 			/* flag set if function should end */
	int key_val;						/* value of key entered (as returned by read_field() */
	int field_entered = 0;					/* 0=field not entered; 1=field_entered */
	int ii;
	int ret_ck_fld;						/* return code by check_unassigned_flds[]() functions */
	char read_buf[READ_BUF_SIZE];				/* buffer for reading fields */
	struct scr_flds *ptr_scr_fld;
	int should_clear = 0;

	disp_select_win(ptr_criteria); 				/*  Display the window for selection of search criteria. */

	srch_dt_tm = get_internal_time(&ptr_criteria->startdate[0],&ptr_criteria->starttime[0]);

	piu = START_UNASSIGNED_PROMPT;				/* prompt is placed on first fleet */

	while ( scr_name == UNASSIGNED_CALLS_SCR && !end_criteria_unassigned && !end_unassigned_srch) {
		check_mail();
		ptr_scr_fld = srch_un_flds;

		if ( piu == 9 || piu == 10 ) 
			/* date or time field to be entered; should be cleared on entry of 1st char */
			should_clear = 1;
		key_val = read_field(srch_win,ptr_scr_fld,piu,read_buf,&field_entered,&should_clear);

		if (key_val == -1)
			continue;

		if(clear_err_flag){
			clear_error();
			refresh();
		}

		wattrset(srch_win, A_UNDERLINE);

		ret_ck_fld = (*check_unassigned_flds[piu])(&piu,read_buf, key_val,field_entered, &select_criteria,
					&end_criteria_unassigned);
		wattrset(srch_win, 0);

		if(ret_ck_fld == INVALID)		   	/* Date/Time had bad format */
			continue;

		if ( ret_ck_fld == NOT_DONE )  {		/* user entered a function key which is not */
			 					/* processed by the check_line_no(). So call */
			 					/* the ftnkey_handler() */
			ftnkey_handler(&piu, key_val,NOT_AVAILABLE);
			if ( scr_name == UNASSIGNED_CALLS_SCR )
				disp_select_win(ptr_criteria); 	/*  Display the window for selection of search criteria. */
			if ( key_val == HELP_KEY )  {
				/* ftnkey_handler() had called help(). The help window has overlayed the
				 * search window, so repaint the search window
				 */
				touchwin(srch_win);
				wrefresh(srch_win);
			}  /* end if help_key */
		}
	}

	if(scr_name != UNASSIGNED_CALLS_SCR)
		return (NOT_DONE);
	 
	ptr_srch_key = &cl_key4;

	wclear(srch_win);
	wrefresh(srch_win);

	refresh();
	return (DONE);
}


ck_unassigned_dummy(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{
}

ck_unassigned_fleet(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{
    int fl_index;
	
	if ( field_entered ) { 							/* user entered fleet id */

		if(read_buf[0] == ' '){						/* user deselected a fleet */
			ptr_criteria->fleet[*piu_ptr-1] = '\0';
			*piu_ptr += 1; 						/* go to next prompt position */
			return(DONE);
		}

		if ((fl_index = find_findex(read_buf[0])) == -1 ) {		/* entered invalid fleet id, trap user in field */
			prt_error(UI_NOFIELD,catgets(UI_m_catd, UI_1, UI_CRIT_UN_1, "<fleet id>"));
			return(DONE);
		}

		if ((*ui_fleet_perms[fl_index])() == NOT_ALLOWED ) {	/* has permission to use ? */
			prt_error(UI_NOT_ALLOWED,catgets(UI_m_catd, UI_1, UI_CRIT_UN_2, "<fleet>"));
			return(DONE);						/* trap user in field */
		}

		ptr_criteria->fleet[*piu_ptr-1] = read_buf[0];			/* valid fleet */
	}

	if ( key_val == SEND_KEY )
	{
		*ptr_end_unassinged = 1;	/* end all window */
		return(DONE);
	}
	else if ( key_val == '\r' || key_val == KEY_DOWN || key_val == '\n'){
			*piu_ptr += 1;
			return(DONE);
	     }
	else if ( key_val == KEY_UP) {
	    if (*piu_ptr > 1)
		*piu_ptr -= 1;
	    else
		*piu_ptr = 10; /* go to time field */
	    return(DONE);
	}
	else {
	     return(NOT_DONE);						/* user pressed a function key */
	     }

}


ck_unassigned_date(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{

	char entered_date[DATE_SIZE];				/* date entered by the user */
	
	if ( field_entered ) {					 /* user entered field */

		if((verify_date(read_buf,entered_date)) == -1)  {
			prt_error(BAD_DATE,catgets(UI_m_catd, UI_1, UI_CRIT_UN_3, "<format is mm/dd/yy>"));
			return(INVALID);
		}
		srch_dt_tm = get_internal_time(entered_date,&ptr_criteria->starttime[0]);
		strcpy(ptr_criteria->startdate,entered_date);
		mvwprintw(srch_win,0,60, "%s ", ptr_criteria->startdate);
	}

	if ( key_val == SEND_KEY ) {
		*ptr_end_unassinged = 1;					/* end all window */
		return(DONE);
	}
	else if ( key_val == '\r' || key_val == KEY_DOWN  || key_val == '\n' ){
		*piu_ptr += 1;
		return(DONE);
             }
	else if ( key_val == KEY_UP ){
		*piu_ptr -= 1;
		return(DONE);
	     }
	else {
	     return(NOT_DONE);					/* user hit a function key */
	}
}


ck_unassigned_time(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{
short loop;
	char entered_time[TIME_SIZE];					/* time entered by the user */
	
	if ( field_entered ) {						 /* user entered field */

		if((verify_time(read_buf,entered_time)) == -1)  {
			prt_error(BAD_TIME,catgets(UI_m_catd, UI_1, UI_CRIT_UN_4, "<format is hh:mm>"));
			return(INVALID);
		}
		srch_dt_tm = get_internal_time(&ptr_criteria->startdate[0],entered_time);
		strcpy(ptr_criteria->starttime,entered_time);
		mvwprintw(srch_win,0,85,"%s", ptr_criteria->starttime);
	}

	if ( key_val == SEND_KEY ){
		*ptr_end_unassinged = 1;					/* end unassigned window */
		return(DONE);
	}
	else if ( key_val == '\r' || key_val == KEY_DOWN  || key_val == '\n' ){
		*piu_ptr = 1;
		return(DONE);
	     }
	else if ( key_val == KEY_UP ){
		*piu_ptr -= 1;
		return(DONE);
	     }
	else {
	     return(NOT_DONE);					/* user hit a function key */
	     }

}


ck_unassigned_street(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{
}


ck_unassigned_name(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged; 
{
}

ck_unassigned_phone1(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{
}

ck_unassigned_charge(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{
	
}

 
ck_unassigned_phone2(piu_ptr, read_buf, key_val, field_entered, ptr_criteria, ptr_end_unassinged)
	int *piu_ptr;
	char *read_buf;
	int key_val;
	int field_entered;
	struct select_criterias *ptr_criteria;
	int *ptr_end_unassinged;
{
}
